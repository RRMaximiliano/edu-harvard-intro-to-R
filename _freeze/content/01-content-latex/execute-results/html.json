{
  "hash": "29265ad12860fc0f2d0fcfbbdf499dd0",
  "result": {
    "markdown": "---\ntitle: \"Intro to LaTeX\"\nauthor: \"Rony Rodriguez-Ramirez\"\ndate: \"2024-02-09\"\n---\n\n\n\n\n## Introduction\n\nWelcome to our introductory tutorial on LaTeX, with a focus on using Overleaf as our platform of choice. LaTeX is a powerful typesetting system used for creating professional-looking documents. Overleaf simplifies the process by providing an online, collaborative environment for LaTeX document editing and compilation. In this tutorial, we'll cover some fundamental aspects of LaTeX that are essential for creating well-structured academic and scientific documents.\n\n## Basic Document Structure\n\nA LaTeX document starts with the `\\documentclass` command, defining the overall layout and style. For most academic documents, `article` class is sufficient. We then include packages with `\\usepackage{}` to add functionality, such as improved spacing, better footnote handling, and advanced table features. Every LaTeX document begins with a preamble, where you define the type of document you're creating and the packages you'll need. Following the preamble, you use the `document` environment to contain the content of your document. Let's break down these components with more details.\n\nIn LaTeX, an environment is a context within which certain formatting rules apply. Environments are used to group content that shares common formatting or behaves in a specific way, encapsulating it within a defined scope. Environments are marked by `\\begin{}` and `\\end{}` commands, which specify the name of the environment. The content placed between these commands follows the styling and behavior defined by the environment.\n\nEnvironments can dictate the structure and formatting of the content they enclose. For example, the `itemize` environment creates a bulleted list, while the `enumerate` environment creates a numbered list. We will talk more about these environments below but first:\n\n## Why Use Overleaf for LaTeX Projects?\n\nOverleaf is a web-based LaTeX editor that simplifies the process of writing, editing, and publishing academic and scientific documents. Here are several reasons why Overleaf stands out as a preferred choice for LaTeX users:\n\n- **Collaboration Made Easy**: Overleaf allows multiple users to work on a document simultaneously, making it ideal for collaborative projects.\n- **No Installation Required**: Being web-based, Overleaf requires no installation. You can access your projects from anywhere, on any computer, without worrying about LaTeX distributions.\n- **Rich Text Editor**: Overleaf provides a rich text editor that displays how your document will look in real-time, reducing the learning curve for beginners.\n- **Version Control**: Overleaf includes version control features, allowing you to track changes and revert to earlier versions of your document if needed.\n- **Template Library**: Overleaf offers a vast library of templates for journals, conferences, and universities, making it easy to start your document with the correct formatting guidelines.\n- **Pro Account Benefits**: With a Pro account, you gain access to additional features like track changes, advanced sharing options, and more.\n\n### Getting Started with Overleaf\n\nTo begin using Overleaf, you'll need to create an account. Fortunately, since we are affiliated with Harvard University, you have access to a Pro account at no extra cost. This offers enhanced features that can significantly aid in your document creation process.\n\n1. **Create an Account**: Visit [Overleaf](https://www.overleaf.com) and sign up for an account.\n2. **Harvard Pro Account**: Check [Harvard's IT website](https://huit.harvard.edu) or add your harvard email to your account.\n\nUsing Overleaf can significantly streamline your LaTeX document creation process, from initial drafting to final publication. Whether you're working on a research paper, thesis, or any other academic document, Overleaf's collaborative and user-friendly platform is designed to facilitate your work and enhance productivity.\n\n## The Preamble\n\nThe preamble is the section of your LaTeX file before the `\\begin{document}` command. It sets the stage for your document, specifying the document class, packages, and other configurations.\n\n### Document Class\n\nThe `\\documentclass` command defines the overall layout and style of your document. Common classes include `article`, `report`, `book`, and `beamer` for presentations. Options such as font size (`12pt`), paper size (`a4paper`), and document formatting (`twoside`) can be specified here.\n\n\n::: {.cell}\n\n```{.latex .cell-code}\n\\documentclass[12pt,a4paper]{article}\n```\n:::\n\n\n### Packages\n\nPackages extend LaTeX's capabilities, allowing for enhanced formatting, additional symbols, and improved functionality. You include a package with the `\\usepackage{}` command. Some essential packages include:\n\n- `geometry` for page layout settings.\n- `graphicx` for including images.\n- `hyperref` for clickable links within your document.\n- `amsmath` for advanced mathematical formatting.\n\nAfter your `documentclass` in your first, you can include your packages as follows:\n\n\n::: {.cell}\n\n```{.latex .cell-code}\n\\usepackage{geometry, graphicx}\n\\usepackage{amsmath}\n\\usepackage{hyperref}\n```\n:::\n\n\n### The Document Environment\n\nAfter the preamble, the document environment begins with `\\begin{document}` and ends with `\\end{document}`. This is where you include the content of your document, such as text, figures, tables, and equations.\n\n### Basic Text Formatting\n\n- **Sections and Subsections**: Organize your document with `\\section{}`, `\\subsection{}`, and `\\subsubsection{}` commands.\n- **Bold, Italic, and Underline**: Use `\\textbf{}`, `\\textit{}`, and `\\underline{}` for text emphasis.\n- **Lists**: Create bulleted and numbered lists with `itemize` and `enumerate` environments.\n\n\n::: {.cell}\n\n```{.latex .cell-code}\n\\section{Introduction}\nThis is an \\textbf{important} concept.\n\n\\begin{itemize}\n  \\item First item\n  \\item Second item\n\\end{itemize}\n\n\\begin{enumerate}\n  \\item First numbered item\n  \\item Second numbered item\n\\end{enumerate}\n```\n:::\n\n\nSo, as of now, we have the following latex code:\n\n\n::: {.cell}\n\n```{.latex .cell-code}\n\\documentclass[12pt,a4paper]{article}\n\n\\usepackage{geometry, graphicx}\n\\usepackage{amsmath}\n\\usepackage{hyperref}\n\n\\begin{document}\n\\section{Introduction}\nThis is an \\textbf{important} concept.\n\n\\begin{itemize}\n  \\item First item\n  \\item Second item\n\\end{itemize}\n\n\\begin{enumerate}\n  \\item First numbered item\n  \\item Second numbered item\n\\end{enumerate}\n\n\\end{document}\n```\n:::\n\n\n### Including Figures and Tables\n\n- **Figures**: Use the `figure` environment and `\\includegraphics` to include images.\n- **Tables**: Use the `table` environment combined with `tabular` for basic tables. For more advanced tables, consider the `threeparttable` or `tabularx` packages.\n\n\n::: {.cell}\n\n```{.latex .cell-code}\n\\begin{figure}[ht]\n  \\centering\n  \\includegraphics[width=0.5\\textwidth]{image.png}\n  \\caption{Sample figure}\n\\end{figure}\n```\n:::\n\n\nThis LaTeX code snippet is used to insert a figure into a document. The `\\begin{figure}[ht]` command initiates a figure environment, with `[ht]` specifying that LaTeX should try to place the figure here (`h`) or at the top (`t`) of a page. The `\\centering` command ensures that the figure is centered on the page. The `\\includegraphics[width=0.5\\textwidth]{image.png}` command is used to include the actual image file named `image.png` into the document, scaling it to half the width of the text column. Finally, the `\\caption{Sample figure}` command adds a caption below the figure, titled \"Sample figure\", and the `\\end{figure}` command concludes the figure environment. This structure is commonly used in academic and professional documents to include and properly format images.\n\nThere are better ways to handling the inclusion of figures but, for now, we will skip them.\n\n#### Creating Tables with `threeparttable`\n\nTables are a crucial part of scientific documents, providing a clear way to present data and results. The `threeparttable` package allows for adding notes beneath tables, ensuring they are the same width as the table itself.\n\n### Example Table\n\n\n::: {.cell}\n\n```{.latex .cell-code}\n\\begin{table}[H]\n  \\centering\n  \\begin{threeparttable}\n    \\caption{Sample Table}\n    \\begin{tabular}{cc}\n      \\toprule\n      Header 1 & Header 2 \\\\\n      \\midrule\n      Data 1   & Data 2   \\\\\n      Data 3   & Data 4   \\\\\n      \\bottomrule\n    \\end{tabular}\n    \\begin{tablenotes}\n      \\small\n      \\item Note: This is a sample note.\n    \\end{tablenotes}\n  \\end{threeparttable}\n\\end{table}\n```\n:::\n\n\nThis LaTeX code snippet creates a table with a note section below it, centered on the page, using the `table` and `threeparttable` environments for structure and notes, respectively. The `table` environment is specified with `[H]` to position the table here in the text, overriding LaTeX's default floating behavior. Inside, the `threeparttable` environment is used to allow for adding notes that align with the width of the table. The table itself is created using the `tabular` environment with two centered columns (`cc`), and it utilizes the `booktabs` package commands (`\\toprule`, `\\midrule`, `\\bottomrule`) to format its top, middle, and bottom lines for a cleaner look. The `\\caption{Sample Table}` command adds a title above the table. Finally, the `tablenotes` environment, part of `threeparttable`, provides a section for notes related to the table, styled with `\\small` for smaller text.\n\n- **Packages Required**: To successfully compile this code, the `float` package is needed for the `[H]` placement specifier, and the `threeparttable` and `booktabs` packages are necessary for the notes and enhanced table formatting, respectively.\n- **Purpose**: This setup is ideal for academic and scientific documents where tables require detailed explanations or notes for clarification, ensuring that all parts of the table are neatly organized and visually appealing.\n\nExpanding the tutorial to include sections on equations and bibliography management will provide users with essential skills for academic writing in LaTeX. Below are the proposed sections to be integrated into the R Markdown (`qmd`) tutorial.\n\n## Writing Equations in LaTeX\n\n\\LaTeX is renowned for its ability to create beautifully formatted mathematical expressions and equations lol (Yes, I love LaTeX but I can be a pain sometimes). This section introduces the basics of writing equations in LaTeX.\n\n### Inline and Displayed Equations\n\n- **Inline Equations**: Use the dollar signs `$...$` to include mathematical content within text. For example, `$E=mc^2$` renders as $E=mc^2$ inline with your text. You can also use `\\(E=mc^2\\)` to render inline equations.\n  \n- **Displayed Equations**: For equations that should be centered and set apart from the text, use the double dollar signs `$$...$$` or the `\\[...\\]` syntax. For example,\n\n\n::: {.cell}\n\n```{.latex .cell-code}\n  \\[\n  \\int_{a}^{b} f(x)\\, dx = F(b) - F(a)\n  \\]\n```\n:::\n\n\n- **Fractions and Square Roots**: Use `\\frac{numerator}{denominator}` for fractions and `\\sqrt{expression}` for square roots.\n- **Subscripts and Superscripts**: Use `_` for subscripts and `^` for superscripts.\n- **Matrices**: Enclose matrix elements in the `matrix`, `pmatrix`, or `bmatrix` environments within `\\[...\\]` to create matrices without or with parentheses/brackets.\n\nMy preferred way is to use the `equation` environment. This will add a number to your equation that you can reference in your text. \n\n\n::: {.cell}\n\n```{.latex .cell-code}\n\\begin{equation}\nY = \\alpha + \\beta X + \\varepsilon\n\\end{equation}\n```\n:::\n\n\n## Managing Bibliographies in LaTeX\n\nLaTeX, combined with BibTeX or `biblatex`, offers powerful tools for citation management and bibliography creation, essential for academic writing.\n\n### Using BibTeX\n\n1. **Create a `.bib` File**: This file will store your references in a structured format. For example:\n\n\n::: {.cell}\n\n```{.bibtex .cell-code}\n@book{knuth1984texbook,\n title={The {TeX}book},\n author={Knuth, Donald E},\n year={1984},\n publisher={Addison-Wesley}\n}\n```\n:::\n\n\n2. **Citing in Your Document**: Use the `\\cite{}` command within your LaTeX document to cite references. For example, `\\cite{knuth1984texbook}`.\n3. **The `thebibliography` Environment**: Alternatively, manually list references using `thebibliography` environment if not using BibTeX.\n\nBelow, there is an example using `biblatex`. I will try to have more time to add a more relevant example (and reproducible!).\n\n### Using `biblatex` for Advanced Bibliography\n\n`biblatex` provides advanced features for bibliography management. Include it in your preamble with:\n\n\n::: {.cell}\n\n```{.latex .cell-code}\n\\usepackage[backend=biber, style=authoryear]{biblatex}\n\\addbibresource{references.bib}\n```\n:::\n\n\n- Replace `style=authoryear` with your desired citation style.\n- Use `\\printbibliography` at the end of your document to display the bibliography.\n- Cite works with `\\textcite{}` for inline citations or `\\parencite{}` for parenthetical citations.\n\n### Example of Citing\n\nAfter referencing a work in your text using `\\cite{}` or `\\textcite{}`, compile your document twice to update citation links and bibliography.\n\n\n::: {.cell}\n\n```{.latex .cell-code}\nAs discussed by \\textcite{knuth1984texbook}, LaTeX is an effective tool for document preparation, lol.\n```\n:::\n\n\n## Handling Special Characters in LaTeX\n\nLaTeX uses several characters for formatting and commands, which means they can't be used directly in your text without being interpreted by LaTeX. If you need to include these special characters in your document as regular text, you must use a backslash (`\\`) before the character or use an alternative command.\n\n### List of Special Characters\n\nThe following characters are considered special in LaTeX:\n\n- `#` - Used for parameters in macros. To display it, use `\\#`.\n- `$` - Used to initiate and end math mode. To display it, use `\\$`.\n- `%` - Used for comments. To display it, use `\\%`.\n- `^` - Used for superscripts in math mode. To display it, use `\\^{}`.\n- `&` - Used for tab alignment in tables. To display it, use `\\&`.\n- `_` - Used for subscripts in math mode. To display it, use `\\_`.\n- `{` and `}` - Used for grouping content. To display these, use `\\{` and `\\}`.\n- `~` - Represents a non-breaking space. To display it, use `\\textasciitilde` or `\\~{}`.\n- `\\` - Used to introduce commands. To display the backslash itself, use `\\textbackslash` since `\\\\` is used for line breaks.\n\n### Example Usage\n\nHere is how you can include these special characters in a LaTeX document:\n\n\n::: {.cell}\n\n```{.latex .cell-code}\n\\documentclass{article}\n\\begin{document}\n\nSpecial characters in LaTeX include \\#, \\$, \\%, \\^{}, \\&, \\_, \\{, \\}, \\textasciitilde, and \\textbackslash.\n\n\\end{document}\n```\n:::\n\n\n::: {.callout-tip title=\"Why It Matters!\"}\nUnderstanding how to properly include special characters in your LaTeX documents is essential for avoiding syntax errors and ensuring that your text is displayed as intended. This knowledge is particularly useful when typing mathematical expressions, programming code, or when you need to include symbols that are part of LaTeX’s syntax in your text.\n\nBy mastering the use of special characters, you enhance the readability and precision of your LaTeX documents, whether you're drafting academic papers, technical reports, or any other type of document that requires meticulous formatting.\n:::\n\n\n## Conclusion\n\nThis brief tutorial introduced you to LaTeX using Overleaf, focusing on document structure, table creation with `threeparttable`, and customization with colors. LaTeX's extensive package ecosystem and precise formatting capabilities make it ideal for academic and scientific writing. For hands-on practice, we recommend using Overleaf for its ease of use and collaborative features.\n\n\n:::{.callout-tip title=\"Quarto template that uses latex en las bambalinas!\"}\n\nTo wrap up this tutorial, I've prepared a fully-fledged LaTeX article-style template that incorporates all the elements discussed, including document structure, equations, bibliography, and more, tailored for use with R and Quarto. This template serves as a practical example to help you jumpstart your document creation process, combining the power of LaTeX with the flexibility of R for dynamic content generation.\n\n### Accessing the Template\n\nYou can access and download the template directly from the following link: [LaTeX Article Template](https://posit.cloud/content/4785740). This template is hosted on Posit Cloud (formerly RStudio Cloud), ensuring easy access and the ability to open and work with the template directly in your browser.\n\n### Using the Template\n\nOnce you've accessed the template, here's how to get started:\n\n1. **Open the Template**: Click on the link to view the template. If prompted, sign in or create a free Posit Cloud account.\n2. **Copy the Project**: Make a copy of the project to your own Posit Cloud account, allowing you to edit and compile the document.\n3. **Explore and Customize**: The template is fully editable. Familiarize yourself with its structure and contents, and feel free to modify it to suit your project's needs.\n4. **Compile and Download**: Use Posit Cloud's integrated Quarto and LaTeX tools to compile the document into a PDF. Just click the render thingy! :)\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}