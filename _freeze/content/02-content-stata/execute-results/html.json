{
  "hash": "fbf0e1c80286243b13dedc2526459aa7",
  "result": {
    "markdown": "---\ntitle: \"Exploring data in Stata\"\nauthor: \"Rony Rodriguez-Ramirez\"\ndate: \"2024-02-10\"\n---\n\n::: {.cell}\n\n:::\n\n\n## Introduction\n\nIn the last tutorial, we learned some Stata basics. We are going to continue with the basics in a more \"Stata\" friendly way. Let's start by loading our dataset `fake_scores.dta`. You can find this dataset in the repository, or download directly it from [here](https://github.com/RRMaximiliano/edu-harvard-programming/blob/master/files/data/fake_scores.dta).\n\n\n\n::: {.cell collectcode='true'}\n\n```{.stata .cell-code}\nuse \"../files/data/fake_scores.dta\", clear\n```\n:::\n\n\n## Viewing a dataset\n\n### Useful commands to explore data sets\n\nAs we explore variables of different types, we will learn how to use the following Stata commands:\n\n- `browse`: See all data in spreadsheet format\n- `summarize`: Basic statistics for numeric variables\n- `describe`: List of all variables in the data set in memory\n- `codebook`: List of all variables in the data set in memory\n- `tabulate`: Show a frequency table\n- `histogram`: Visualize the distribution of a continuous or discrete variable\n- `graph bar`: Visualize continuous variables over discrete or categorical variables\n- `graph pie`: Visualize groups in a categorical variable\n\n### Exploring a data set\n\n- The first command we will use to explore our data set today is `browse`\n- Another very useful command is `summarize`\n- It can be used to display basic statistics for the entire dataset or for some variables and observations\n\nLet's use `summarize` to see descriptive statistics for the entire dataset.\n\n\n::: {.cell output.lines='[-1,-2,-3,-4,-5]'}\n\n```{.stata .cell-code}\nsummarize\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n...\n. summarize\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n      course |          0\n     student |          0\n   studentid |         96        12.5    6.958524          1         24\n       score |         96    46.21875     29.2093          0         99\nconcentrat~n |          0\n\n. \n...\n```\n:::\n:::\n\n\n### Exploring a data set: `describe`\n\n- The next command we will use is called `describe`\n- This command is used to view metadata, that is, data about the data\n\n\n::: {.cell output.lines='[-1,-2,-3,-4,-5]'}\n\n```{.stata .cell-code}\ndescribe\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n...\n. describe\n\nContains data from ../files/data/fake_scores.dta\n Observations:            96                  \n    Variables:             5                  10 Feb 2024 17:56\n-------------------------------------------------------------------------------\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\ncourse          str7    %-9s                  \nstudent         str9    %-9s                  \nstudentid       double  %10.0g                \nscore           double  %10.0g                \nconcentration   str4    %-9s                  \n-------------------------------------------------------------------------------\nSorted by: \n\n. \n...\n```\n:::\n:::\n\n\n`describe` is particularly useful to identify types of variables.\n\n### Exploring numeric variables\n\nBased on what we saw in the result for `describe`, let's take a look at how we can see information about them.\n\n\n::: {.cell output.lines='[-1,-2,-3,-4,-5]'}\n\n```{.stata .cell-code}\ncodebook score\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n...\n. codebook score\n\n-------------------------------------------------------------------------------\nscore                                                               (unlabeled)\n-------------------------------------------------------------------------------\n\n                  Type: Numeric (double)\n\n                 Range: [0,99]                        Units: 1\n         Unique values: 62                        Missing .: 0/96\n\n                  Mean: 46.2188\n             Std. dev.: 29.2093\n\n           Percentiles:     10%       25%       50%       75%       90%\n                              6        24        47      70.5        89\n\n. \n...\n```\n:::\n:::\n\n\n### Subsetting observations\n\n- The expression `if` allows us to subset observations, that is, we can choose observations based on a logical condition.\n\n\n::: {.cell}\n\n```{.stata .cell-code}\nbrowse if missing(score)\n```\n:::\n\n\n### Exploring text (string) variables\n\n- The process data set we are using contains two text variables: `student` and `course`.\n\n\n::: {.cell output.lines='[-1,-2,-3,-4,-5]'}\n\n```{.stata .cell-code}\ncodebook student course\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n...\n. codebook student course\n\n-------------------------------------------------------------------------------\nstudent                                                             (unlabeled)\n-------------------------------------------------------------------------------\n\n                  Type: String (str9)\n\n         Unique values: 24                        Missing \"\": 0/96\n\n              Examples: \"Ben\"\n                        \"Hwa\"\n                        \"Krista\"\n                        \"Nigel\"\n\n-------------------------------------------------------------------------------\ncourse                                                              (unlabeled)\n-------------------------------------------------------------------------------\n\n                  Type: String (str7)\n\n         Unique values: 4                         Missing \"\": 0/96\n\n            Tabulation: Freq.  Value\n                           24  \"EDU 001\"\n                           24  \"EDU 301\"\n                           24  \"EDU 302\"\n                           24  \"EDU 502\"\n\n               Warning: Variable has embedded blanks.\n\n. \n...\n```\n:::\n:::\n\n\n### Exploring categorical variables\n\nAs we noted when using `describe`, one way to identify categorical variables is when they have *value labels*. \n\n\n::: {.cell output.lines='[-1,-2,-3,-4,-5]'}\n\n```{.stata .cell-code}\ncodebook concentration\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n...\n. codebook concentration\n\n-------------------------------------------------------------------------------\nconcentration                                                       (unlabeled)\n-------------------------------------------------------------------------------\n\n                  Type: String (str4)\n\n         Unique values: 3                         Missing \"\": 0/96\n\n            Tabulation: Freq.  Value\n                           44  \"CIS\"\n                           24  \"EPPE\"\n                           28  \"HDLT\"\n\n. \n...\n```\n:::\n:::\n\n\n### Exploring categorical variables\n\n- The command `tabulate` counts the number of observations that take each value in a categorical variable.\n\n\n::: {.cell output.lines='[-1,-2,-3,-4,-5]'}\n\n```{.stata .cell-code}\ntabulate concentration\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n...\n. tabulate concentration\n\nconcentrati |\n         on |      Freq.     Percent        Cum.\n------------+-----------------------------------\n        CIS |         44       45.83       45.83\n       EPPE |         24       25.00       70.83\n       HDLT |         28       29.17      100.00\n------------+-----------------------------------\n      Total |         96      100.00\n\n. \n...\n```\n:::\n:::\n\n\n### Commenting do-files\n\n- Comments are used to organize and explain the code so it is easier for you to read it and edit it later on.\n\n\n::: {.cell}\n\n```{.stata .cell-code}\n* Explore the categorical variables process_type\ntabulate concentration // Simple tabulation\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}