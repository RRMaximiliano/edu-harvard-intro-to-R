{
  "hash": "4b899fc1ea3d9e073589662fe242d2f4",
  "result": {
    "markdown": "---\ntitle: \"Data Cleaning and Analysis with tidyverse:<br>First Part\"\nauthor: \"Rony Rodriguez-Ramirez\"\ndate: \"2024-02-02\"\n---\n\n\n\n\nBuilding on the basics of R and the tidyverse, this tutorial delves into more complex data cleaning and analysis techniques. We'll tackle common challenges encountered with real-world data and explore ways to manipulate and analyze datasets to extract meaningful insights.\n\n## Handling Missing Data\n\nReal-world datasets often come with missing values, which can significantly impact your analysis. Let's explore strategies to deal with missing data:\n\n### Identifying Missing Values\n\n\nIn the tidyverse, `tibble()` and `tribble()` are functions that create a more modern take on the data frame. They are part of the `tibble` package and offer several advantages over the base R `data.frame` for data analysis and manipulation (the one we saw in the basics tutorial. Here's a brief overview of each and how they compare to traditional data frames.\n\n### `tibble()`\n\nA `tibble` is a modern reimagining of the data frame, keeping what time has proven to be effective, and throwing out what is not. Here are some key features:\n\n- **Printing**: Tibbles are printed in a more readable format than traditional data frames, showing only the first 10 rows and all columns that fit on the screen.\n- **Subsetting**: Subsetting a tibble with `[` always returns a tibble, unlike `data.frame`, which might return a vector if a single column is selected.\n- **Column data types**: Tibbles are more tolerant about column types and do not convert strings to factors by default (a common source of frustration in R).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a tibble\nmy_tibble <- tibble(\n  id = 1:5,\n  name = c(\"Emma\", \"Rony\", \"Jostin\", \"David\", \"Alex\"),\n  score = c(90, 80, 88, 100, 100)\n)\n```\n:::\n\n\n### `tribble()`\n\n`tribble()`, short for \"transposed tibble\", is designed for easy manual creation of tibbles. It allows for a column-wise specification of data which can be more readable and convenient for small datasets or examples.\n\n- **Readability**: The layout of `tribble()` makes it easy to visually match values to their respective columns.\n- **Convenience**: Ideal for creating small datasets for examples or tests.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a tribble\nmy_tribble <- tribble(\n  ~id, ~name,    ~score,\n  1,   \"Emma\",  90,\n  2,   \"Rony\",  80,\n  3,   \"Jostin\", 88,\n  4,   \"David\",  100,\n  5,   \"Alex\",    100\n)\n```\n:::\n\n\n### Differences from `data.frame`\n\nWhile `data.frame` is the base R structure for storing tabular data, `tibble` and `tribble` bring improvements that are particularly useful in data analysis:\n\n- **Printing and Viewing**: Tibbles provide a more user-friendly way to view data in the console.\n- **Factor conversion**: By default, strings are not converted to factors in tibbles, avoiding unexpected behavior during data analysis.\n- **Subsetting behavior**: Consistent output types make tibble subsetting more predictable.\n- **Row names**: Tibbles do not use row names, which encourages cleaner, more explicit data manipulation.\n\nIn summary, `tibble()` and `tribble()` offer a modern, tidyverse-optimized approach to data frames, making data manipulation and exploration in R more intuitive and less prone to common data analysis pitfalls.\n\nLet's go back to our data cleaning tutorial and let's first create a dataset with missing values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load sample data\ndata <- tribble(\n  ~id, ~value, ~category,\n  1, NA, \"A\",\n  2, 5, \"B\",\n  3, 2, \"A\",\n  4, NA, \"B\",\n  5, 3, \"C\"\n)\n\n# Identify rows with missing values\ndata %>% \n  filter(is.na(value))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n     id value category\n  <dbl> <dbl> <chr>   \n1     1    NA A       \n2     4    NA B       \n```\n:::\n:::\n\n\n### Imputing Missing Values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Impute missing values with the mean\ndata %>% \n  mutate(\n    value = if_else(is.na(value), mean(value, na.rm = TRUE), value)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n     id value category\n  <dbl> <dbl> <chr>   \n1     1  3.33 A       \n2     2  5    B       \n3     3  2    A       \n4     4  3.33 B       \n5     5  3    C       \n```\n:::\n:::\n\n\n## Joining Datasets\n\nOften, you'll need to combine data from multiple sources. Here, we'll use `dplyr`'s join functions to merge datasets.\n\n### Example Datasets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create two sample datasets\nstudents <- tibble(\n  id = 1:3,\n  name = c(\"Emma\", \"Rony\", \"Jostin\")\n)\n\nscores <- tibble(\n  id = c(1, 2, 4),\n  score = c(88, 80, 75)\n)\n```\n:::\n\n\n### Inner Join\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge datasets to include only matching IDs\ninner_join(students, scores, by = \"id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n     id name  score\n  <dbl> <chr> <dbl>\n1     1 Emma     88\n2     2 Rony     80\n```\n:::\n:::\n\n\n## Exploratory Data Analysis (EDA)\n\nEDA is crucial for understanding the underlying patterns of your data. We'll use `ggplot2` for visualization.\n\n### Histograms\n\nHistograms are great for visualizing the distribution of a numerical variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the `scores` dataset\nggplot(scores, aes(x = score)) +\n  geom_histogram(bins = 5, fill = \"grey\", color = \"black\") +\n  labs(title = \"Distribution of Scores\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-data-cleaning_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Boxplots\n\nBoxplots provide insights into the central tendency and spread of data, as well as outliers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the `scores` dataset\nggplot(scores, aes(x = \"\", y = score)) +\n  geom_boxplot(fill = \"grey\", color = \"black\") +\n  labs(title = \"Score Spread\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-data-cleaning_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "02-data-cleaning_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}