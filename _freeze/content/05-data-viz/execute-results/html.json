{
  "hash": "65829047cb5a6a262e20d83b51bc64e9",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization in R using ggplot2\"\ndate: \"2024-02-03\"\nauthor: \"Rony Rodriguez-Ramirez\"\n---\n\n\n\n\n# Introduction\n\nVisualizing data is crucial in understanding underlying patterns and communicating results effectively. This tutorial will guide you through creating various types of visualizations using `ggplot2` in R, focusing on a dataset of student scores (a fake dataset btw).\n\n## Loading the Dataset\n\nFirst, we'll load the dataset from a CSV file, and load the tidyverse package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the package\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# Load the dataset\nscores_data <- read_csv(\"../files/data/fake_scores.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 96 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): course, student, concentration\ndbl (2): studentid, score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nThis dataset contains students (fake) information, you can use the `glimpse` function to look at the variables in the dataset. @tbl-students-table shows a representation of the data we loaded as a table.\n\n\n::: {#tbl-students-table .cell tbl-cap='Data from the fake_scores.csv file as a table.'}\n::: {.cell-output-display}\n|course  |student | studentid| score|concentration |\n|:-------|:-------|---------:|-----:|:-------------|\n|EDU 001 |Jostin  |         1|    10|EPPE          |\n|EDU 001 |Rony    |         2|     6|EPPE          |\n|EDU 001 |Jacob   |         3|    87|CIS           |\n|EDU 001 |Hwa     |         4|    75|CIS           |\n|EDU 001 |Emma    |         5|    19|CIS           |\n|EDU 001 |Ben     |         6|     9|CIS           |\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(scores_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 96\nColumns: 5\n$ course        <chr> \"EDU 001\", \"EDU 001\", \"EDU 001\", \"EDU 001\", \"EDU 001\", \"…\n$ student       <chr> \"Jostin\", \"Rony\", \"Jacob\", \"Hwa\", \"Emma\", \"Ben\", \"Maddie…\n$ studentid     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ score         <dbl> 10, 6, 87, 75, 19, 9, 40, 72, 97, 45, 33, 24, 24, 74, 69…\n$ concentration <chr> \"EPPE\", \"EPPE\", \"CIS\", \"CIS\", \"CIS\", \"CIS\", \"HDLT\", \"CIS…\n```\n:::\n:::\n\n\n## Understanding `ggplot2`\n\n`ggplot2` is a part of the tidyverse that allows for creating complex and beautiful visualizations using a consistent and intuitive syntax. The name `ggplot2` is derived from the concept of the grammar of graphics, a system for describing and building a wide range of graphics. `ggplot2` uses a grammar of graphics, where you define the data, aesthetics, and geometries.\n\n### Basics of `ggplot2`\n\nA `ggplot2` graph is built up from a few basic elements:\n\n- **Data**: The dataset you want to visualize.\n- **Aesthetics (`aes`)**: Defines how variables in the data are mapped to visual properties (aesthetics) of the graph such as x and y axes, color, size, etc.\n- **Geometries (`geom_` functions)**: The geometric objects (shapes) that represent the data points. For example, points (`geom_point()` for scatter plots), lines (`geom_line()`), and bars (`geom_bar()` for bar charts).\n\n### Histogram\n\nHistograms are great for visualizing the distribution of scores for a single subject. Let's visualize the distribution of *all* scores in the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_data %>% \n  ggplot( \n    aes(x = score)\n  ) +\n  geom_histogram(\n    fill = \"grey\", \n    color = \"black\"\n  ) +\n  labs(\n    title = \"Distribution of All Scores\",\n    x = \"All Scores\",\n    y = \"Count\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](05-data-viz_files/figure-html/histogram-1.png){width=672}\n:::\n:::\n\n\n- `scores_data`: The dataset being used, assumed to contain a column named `score` which holds the numeric values that we want to visualize.\n- `%>%`: The pipe operator, used here to pass `scores_data` as the first argument to the following `ggplot()` function.\n- `ggplot(aes(x = score))`: Initializes a ggplot object specifying the aesthetic mappings. Here, `aes(x = score)` indicates that the `score` column from `scores_data` should be used as the x-axis values in the histogram.\n- `geom_histogram()`: This adds a histogram layer to the plot. \n- `fill = \"grey\"`: Sets the fill color of the bars in the histogram to grey.\n- `color = \"black\"`: Sets the color of the border of the bars to black.\n- `labs()`: Used to modify the labels on the plot, including the title of the plot and the x and y axes. Here, it sets the title of the plot to \"Distribution of All Scores\", labels the x-axis as \"All Scores\", and the y-axis as \"Count\", which represents the number of observations within each bin of scores.\n- `theme_minimal()`: Applies a minimalistic theme to the plot, which reduces the background clutter and focuses attention on the data itself.\n\n:::{.callout-warning}\n**Important!!**: The use of the `+` operator instead of the pipe operator (`%>%`) in `ggplot2` syntax is rooted in the design and philosophy of the `ggplot2` package itself, which is based on the Grammar of Graphics.\n\n- **Layered Approach**: `ggplot2` is built on the concept of layering components of a plot on top of each other. The `+` operator is used to add or layer these components, such as axes, plot types (geoms), scales, and themes, to build up a plot step by step. This approach is akin to constructing a sentence in a language, where each layer adds more context or detail, aligning with the Grammar of Graphics philosophy.\n:::\n\n### Scatter Plot\n\nLet's start with a scatter plot comparing scores across two subjects, assuming our dataset has `Math` and `Science` scores. However, see that your dataset currently is in long format. So, we need to change it to wide format. Look at the following code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_data_wide <- scores_data %>% \n  filter(\n    course %in% c(\"EDU 001\", \"EDU 302\")\n  ) %>% \n  pivot_wider(\n    names_from = course, \n    values_from = score\n  )\n\nscores_data_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 5\n   student studentid concentration `EDU 001` `EDU 302`\n   <chr>       <dbl> <chr>             <dbl>     <dbl>\n 1 Jostin          1 EPPE                 10         0\n 2 Rony            2 EPPE                  6        75\n 3 Jacob           3 CIS                  87         6\n 4 Hwa             4 CIS                  75        75\n 5 Emma            5 CIS                  19        48\n 6 Ben             6 CIS                   9         1\n 7 Maddie          7 HDLT                 40        89\n 8 Alex            8 CIS                  72        52\n 9 Krista          9 CIS                  97        61\n10 Max            10 HDLT                 45        15\n# ℹ 14 more rows\n```\n:::\n:::\n\n\nThis will give a dataset with 24 observations and the two subject (EDU 001 and EDU 302) as columns.The `pivot_wider` function creates new columns for each course, with scores filled in accordingly.\n\n- `filter(course %in% c(\"EDU 001\", \"EDU 302\"))`: Narrows down the dataset to only include scores from the specified courses.\n- `pivot_wider(names_from = course, values_from = score)`: Transforms the dataset so each course becomes its own column, populated with corresponding scores.\n\nNow, let's plot the scores in the two courses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_data_wide %>% \n  ggplot(\n    aes(x = `EDU 001`, y = `EDU 302`)\n  ) +\n  geom_point() +\n  labs(\n    title = \"EDU 001 vs. EDU 302\",\n    x = \"EDU 001 Scores\",\n    y = \"EDU 302 Scores\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05-data-viz_files/figure-html/scatter-plot-1.png){width=672}\n:::\n:::\n\n\n## Grouped Visualizations\n\nVisualizing data based on groups or categories is often insightful.\n\n### Boxplot by Subject\n\nUsing our dataset in long format, where each row represents a score in a specific course\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_data %>% \n  ggplot(\n    aes(\n      x = course, \n      y = score, \n      fill = course\n    )\n  ) +\n  geom_boxplot() +\n  labs(\n    title = \"Scores by course\",\n    x = \"course\",\n    y = \"Scores\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05-data-viz_files/figure-html/boxplot-1.png){width=672}\n:::\n:::\n\n\n### Bar Plot for Average Scores\n\nA bar plot to visualize the average score per subject.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores_data %>%\n  group_by(course) %>%\n  summarise(\n    avg_score = mean(score)\n  ) %>%\n  ggplot(\n    aes(\n      x = course, \n      y = avg_score, \n      fill = course\n    )\n  ) +\n  geom_col(color = \"black\") +\n  labs(\n    title = \"Average Scores by Course\",\n    x = \"Course\",\n    y = \"Average Score\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05-data-viz_files/figure-html/bar-plot-1.png){width=672}\n:::\n:::\n\n\n## Conclusion\n\nThis tutorial introduced basic to intermediate data visualization techniques using `ggplot2` in R. By leveraging `ggplot2`'s comprehensive features, you can create informative and appealing visual representations of your data to aid in analysis and communication.\n\n",
    "supporting": [
      "05-data-viz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}