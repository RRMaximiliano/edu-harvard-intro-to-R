{
  "hash": "f0a65a71d1407507addfbf872577410d",
  "result": {
    "markdown": "---\ntitle: \"Data Cleaning and Analysis with tidyverse: Second Part\"\nauthor: \"Rony Rodriguez-Ramirez\"\ndate: \"2024-02-02\"\n---\n\n\n\n\n\n# Introduction\n\nIn this tutorial, we delve into advanced data cleaning and analysis techniques focusing on student and department datasets. We will also demonstrate how to create custom functions in R to automate repetitive tasks in data analysis.\n\n## Merging Datasets\n\nWe will start by merging datasets using `dplyr`'s join functions to combine student information with department details.\n\n### Students and Departments Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Students data\nstudents <- tibble(\n  stu_id = c(1, 2, 3, 4),\n  stu_name = c(\"Emma\", \"Rony\", \"Jostin\", \"David\"),\n  dept_id = c(2, 2, 3, 4)\n)\n\n# Departments data\ndepartments <- tibble(\n  dept_id = c(1, 2, 3, 4),\n  dept_name = c(\"Math\", \"EDU\", \"Science\", \"ECON\")\n)\n```\n:::\n\n\n### `left_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Include all students and their departments if available\nstu_dept <- left_join(students, departments, by = \"dept_id\")\nstu_dept\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  stu_id stu_name dept_id dept_name\n   <dbl> <chr>      <dbl> <chr>    \n1      1 Emma           2 EDU      \n2      2 Rony           2 EDU      \n3      3 Jostin         3 Science  \n4      4 David          4 ECON     \n```\n:::\n:::\n\n\n### `right_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Include all departments and any students in those departments\ndept_stu <- right_join(students, departments, by = \"dept_id\")\ndept_stu\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  stu_id stu_name dept_id dept_name\n   <dbl> <chr>      <dbl> <chr>    \n1      1 Emma           2 EDU      \n2      2 Rony           2 EDU      \n3      3 Jostin         3 Science  \n4      4 David          4 ECON     \n5     NA <NA>           1 Math     \n```\n:::\n:::\n\n\n### `full_join`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Include all students and all departments, matching where possible\nall_stu_dept <- full_join(students, departments, by = \"dept_id\")\nall_stu_dept\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  stu_id stu_name dept_id dept_name\n   <dbl> <chr>      <dbl> <chr>    \n1      1 Emma           2 EDU      \n2      2 Rony           2 EDU      \n3      3 Jostin         3 Science  \n4      4 David          4 ECON     \n5     NA <NA>           1 Math     \n```\n:::\n:::\n\n\n## Creating Functions for Data Analysis\n\nCreating custom functions can significantly enhance efficiency in data analysis. It might not be the case, but if you want to have a function that estimates the `mean`, `sd`, and `std` value in a column we can do the following. Let's called it `add_stats_columns`. This function is designed to enhance a dataset by adding statistical analysis columns related to a specific numeric column within the dataset. It calculates the mean, standard deviation, and creates a standardized version of the selected column. Below is an explanation of the function and a breakdown of each line within it:\n\n### The `add_stats_columns` Function Explained\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_stats_columns <- function(data, column_name) {\n  mean_val <- mean(data[[column_name]], na.rm = TRUE)\n  sd_val   <- sd(data[[column_name]], na.rm = TRUE)\n  \n  data[[paste0(column_name, \"_mean\")]] <- mean_val\n  data[[paste0(column_name, \"_sd\")]]   <- sd_val\n  data[[paste0(column_name, \"_standardized\")]] <- (data[[column_name]] - mean_val) / sd_val\n  \n  return(data)\n}\n```\n:::\n\n\n#### Breaking Down the Function\n\n- `add_stats_columns <- function(data, column_name) { ... }`: This line defines the function `add_stats_columns` that takes two arguments: `data`, a dataset (in the form of a data frame or tibble), and `column_name`, a string representing the name of the column to be analyzed.\n- `mean_val <- mean(data[[column_name]], na.rm = TRUE)`: This line calculates the mean of the specified column, excluding any `NA` (missing) values with `na.rm = TRUE`, and stores it in `mean_val`.\n- `sd_val <- sd(data[[column_name]], na.rm = TRUE)`: Similarly, this line calculates the standard deviation of the specified column, excluding `NA` values, and stores it in `sd_val`.\n- `data[[paste0(column_name, \"_mean\")]] <- mean_val`: This line creates a new column in the dataset named after the original column with `_mean` appended (e.g., if `column_name` is `\"scores\"`, the new column name will be `\"scores_mean\"`), and assigns the calculated mean value to this new column for all rows.\n- `data[[paste0(column_name, \"_sd\")]] <- sd_val`: This line adds another new column to the dataset for the standard deviation, following the same naming convention as for the mean (e.g., `\"scores_sd\"`), and fills it with the calculated standard deviation value.\n- `data[[paste0(column_name, \"_standardized\")]] <- (data[[column_name]] - mean_val) / sd_val`: This line calculates the standardized value for each row in the specified column by subtracting the mean and dividing by the standard deviation. It then stores these values in a new column named with `_standardized` appended to the original column name (e.g., `\"scores_standardized\"`). Standardizing a dataset in this way adjusts the values to have a mean of 0 and a standard deviation of 1, which is useful for certain types of analysis and modeling.\n- `return(data)`: Finally, the function returns the modified dataset with the new statistical columns added. In fact, you can just write `data`, do not need to use the `return` function but let's keep it.\n\n### Usage Example\n\nAssuming `students` is a dataset with a numeric column named `\"math_scores\"`, you can use the function to add statistical analysis columns related to `\"math_scores\"` as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example usage with a hypothetical numeric column in students dataset\n# Let's merge a math_scores data first.\nscores <- tibble(\n  stu_id = c(1, 2, 3, 4),\n  math_scores = c(80, 95, 93, 90)\n)\n\n# Merge the scores with the students data using stu_id \nstu_scores <- right_join(students, scores, by = \"stu_id\")\nstu_scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  stu_id stu_name dept_id math_scores\n   <dbl> <chr>      <dbl>       <dbl>\n1      1 Emma           2          80\n2      2 Rony           2          95\n3      3 Jostin         3          93\n4      4 David          4          90\n```\n:::\n\n```{.r .cell-code}\n# Now, let's apply the function add_stats_columns\nstu_scores_with_stats <- add_stats_columns(stu_scores, \"math_scores\")\nstu_scores_with_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 7\n  stu_id stu_name dept_id math_scores math_scores_mean math_scores_sd\n   <dbl> <chr>      <dbl>       <dbl>            <dbl>          <dbl>\n1      1 Emma           2          80             89.5           6.66\n2      2 Rony           2          95             89.5           6.66\n3      3 Jostin         3          93             89.5           6.66\n4      4 David          4          90             89.5           6.66\n# ℹ 1 more variable: math_scores_standardized <dbl>\n```\n:::\n:::\n\n\n### Applying Functions to Grouped Data\n\nUsing `dplyr` and `purrr` to apply functions to each group separately.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by department and apply stats function\nstudents_grouped <- stu_scores %>%\n  group_by(dept_id) %>%\n  group_modify(~ add_stats_columns(.x, \"math_scores\")) %>%\n  ungroup()\n\nstudents_grouped\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 7\n  dept_id stu_id stu_name math_scores math_scores_mean math_scores_sd\n    <dbl>  <dbl> <chr>          <dbl>            <dbl>          <dbl>\n1       2      1 Emma              80             87.5           10.6\n2       2      2 Rony              95             87.5           10.6\n3       3      3 Jostin            93             93             NA  \n4       4      4 David             90             90             NA  \n# ℹ 1 more variable: math_scores_standardized <dbl>\n```\n:::\n:::\n\n\n`group_modify()` applies a function to each group of a grouped dataframe, where `.x` is the sliced dataframe for each group. This way, the add_stats_columns function is applied correctly to each department group within your `stu_scores` dataset.\n\nThis corrected approach ensures that your custom function `add_stats_columns` is applied to the math_scores column for each group defined by `dept_id`, achieving the intended goal of adding statistical columns based on department groups.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}