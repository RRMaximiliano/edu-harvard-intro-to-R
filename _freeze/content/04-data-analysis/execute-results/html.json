{
  "hash": "eccd5024e4892ca9b7c5e8c93696a7a4",
  "result": {
    "markdown": "---\ntitle: \"Data Analysis\"\nauthor: \"Rony Rodriguez-Ramirez\"\ndate: \"2024-02-09\"\n---\n\n\n\n\n## Introduction\n\nA note on reproducible research:\n\n::: {.callout-warning title=\"Remember!\"}\n### Anything that requires:\n- `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#ac142a;overflow:visible;position:relative;\"><path d=\"M80 96v16c0 17.7 14.3 32 32 32h60.8c16.6-28.7 47.6-48 83.2-48h62c-7.1-27.6-32.2-48-62-48H215.4C211.6 20.9 188.2 0 160 0s-51.6 20.9-55.4 48H64C28.7 48 0 76.7 0 112V384c0 35.3 28.7 64 64 64h96V400H64c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16H80zm64-40a16 16 0 1 1 32 0 16 16 0 1 1 -32 0zM256 464c-8.8 0-16-7.2-16-16V192c0-8.8 7.2-16 16-16H384v48c0 17.7 14.3 32 32 32h48V448c0 8.8-7.2 16-16 16H256zm192 48c35.3 0 64-28.7 64-64V227.9c0-12.7-5.1-24.9-14.1-33.9l-51.9-51.9c-9-9-21.2-14.1-33.9-14.1H256c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H448z\"/></svg>`{=html} Copy-pasting\n- `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#ac142a;overflow:visible;position:relative;\"><path d=\"M162.4 6c-1.5-3.6-5-6-8.9-6h-19c-3.9 0-7.5 2.4-8.9 6L104.9 57.7c-3.2 8-14.6 8-17.8 0L66.4 6c-1.5-3.6-5-6-8.9-6H48C21.5 0 0 21.5 0 48V224v22.4V256H9.6 374.4 384v-9.6V224 48c0-26.5-21.5-48-48-48H230.5c-3.9 0-7.5 2.4-8.9 6L200.9 57.7c-3.2 8-14.6 8-17.8 0L162.4 6zM0 288v32c0 35.3 28.7 64 64 64h64v64c0 35.3 28.7 64 64 64s64-28.7 64-64V384h64c35.3 0 64-28.7 64-64V288H0zM192 432a16 16 0 1 1 0 32 16 16 0 1 1 0-32z\"/></svg>`{=html} Manual formatting after exported\n\n### Reproducible\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#046307;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} R Markdown: dynamic document containing code and text that is exported directly from R into PDF, HTML, Word, Power Point and other formats \n\n`<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 384 512\" style=\"height:1em;width:0.75em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:#046307;overflow:visible;position:relative;\"><path d=\"M320 464c8.8 0 16-7.2 16-16V160H256c-17.7 0-32-14.3-32-32V48H64c-8.8 0-16 7.2-16 16V448c0 8.8 7.2 16 16 16H320zM0 64C0 28.7 28.7 0 64 0H229.5c17 0 33.3 6.7 45.3 18.7l90.5 90.5c12 12 18.7 28.3 18.7 45.3V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64z\"/></svg>`{=html} LaTeX: typesetting system used for scientific publications that automatically reloads tables and figures every time the document is rendered \n\n  \nWhat is NOT reproducible? Anything that requires manual steps to update results in your final document after you update the data or the exact specification. This includes the terrible practice of printing results in the console and pasting them into Word, but also the much less terrible practice of exporting results to Excel and then manually formatting them and copying into Word.\n\n  \nThe two best options to combine with R in terms of reproducibility are Markdown and LaTeX. Markdown is R's dyamic document framework and it's amazingly well developed. Most R advanced R users actually use Markdown to display their results instead of exporting tables and figures. I'm going to show you what that looks like, but this is a slightly more advanced topic that will not be covered on this course.\n\nLaTeX, on the other hand, is widely used among non-R users, and there are plenty of packages to export tables to it in Stata as well.\n\nBut that's enough of me talking. Let's get you all to run some code\n\n:::\n\n\nWe will use the `census` data for this tutorial: \n\n* the `census` data that comes preloaded in Stata. For this, we are going to use the `haven` package.\n* the irony, right?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(tidyverse)\nlibrary(haven)\n```\n:::\n\n\n**Exploratory Analysis**:\n\nSummary statistics appear in almost every research product\n    \n* Used to highlight central tendencies (means/medians)\n* Describe variation in data and comparison groups (SE/SD)\n* Indicate ranges and outliers (quantiles and observation numbers)\n  \n## Load data\n  \nLet's load and glimpse our data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensus <- read_dta(\"http://www.stata-press.com/data/r9/census.dta\")\nglimpse(census)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 50\nColumns: 12\n$ state    <chr> \"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Co…\n$ region   <dbl+lbl> 3, 4, 4, 3, 4, 4, 1, 3, 3, 3, 4, 4, 2, 2, 2, 2, 3, 3, 1, …\n$ pop      <dbl> 3893888, 401851, 2718215, 2286435, 23667902, 2889964, 3107576…\n$ poplt5   <dbl> 296412, 38949, 213883, 175592, 1708400, 216495, 185188, 41151…\n$ pop5_17  <dbl> 865836, 91796, 577604, 495782, 4680558, 592318, 637731, 12544…\n$ pop18p   <dbl> 2731640, 271106, 1926728, 1615061, 17278944, 2081151, 2284657…\n$ pop65p   <dbl> 440015, 11547, 307362, 312477, 2414250, 247325, 364864, 59179…\n$ popurban <dbl> 2337713, 258567, 2278728, 1179556, 21607606, 2329869, 2449774…\n$ medage   <dbl> 29.3, 26.1, 29.2, 30.6, 29.9, 28.6, 32.0, 29.8, 34.7, 28.7, 2…\n$ death    <dbl> 35305, 1604, 21226, 22676, 186428, 18925, 26005, 5123, 104190…\n$ marriage <dbl> 49018, 5361, 30223, 26513, 210864, 34917, 26048, 4437, 108344…\n$ divorce  <dbl> 26745, 3517, 19908, 15882, 133541, 18571, 13488, 2313, 71579,…\n```\n:::\n:::\n\n\nthe `read_dta` function allows us to load dta format data (Stata). It comes from the `haven` package.\n\n::: {.callout-tip title=\"Tip!\"}\nWe can transform all \"labelled\" columns to factos in R using the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensus <- census %>% \n\tmutate(\n\t\tacross(\n\t\t\thaven::is.labelled,\n\t\t\t~ as_factor(.x)\n\t\t)\n\t)\n```\n:::\n\n:::\n\n\nLet's say that you have selected the vars: pop, death, marriage, and divorce. Let's select those variable and assigned to a new object and call it `census2`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensus <- census %>% \n  select(pop, death, marriage, divorce)\n```\n:::\n\n\n## Using the `summary` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(census)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      pop               death           marriage         divorce      \n Min.   :  401851   Min.   :  1604   Min.   :  4437   Min.   :  2142  \n 1st Qu.: 1169218   1st Qu.:  9087   1st Qu.: 14840   1st Qu.:  6898  \n Median : 3066433   Median : 26177   Median : 36279   Median : 17113  \n Mean   : 4518149   Mean   : 39474   Mean   : 47701   Mean   : 23679  \n 3rd Qu.: 5434033   3rd Qu.: 46533   3rd Qu.: 57338   3rd Qu.: 27987  \n Max.   :23667902   Max.   :186428   Max.   :210864   Max.   :133541  \n```\n:::\n:::\n\n\n- `summary()` can also be used with a single variable.\n- When used with continuous variables, it works similarly to `summarize` in Stata.\n- When used with categorical variables, it works similarly to `tabulate`.\n\n\nWith the same variables we selected before pop, death, marriage, and divorce. Let's have the following stats: N, mean, sd, min, and max.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum_table <- census %>% \n\tsummarise(\n\t\tn = sum(!is.na(pop)),\n\t\tmean = mean(pop), \n\t\tsd = sd(pop), \n\t\tmin = min(pop),\n\t\tmax = max(pop)\n\t) \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|  n|    mean|      sd|    min|      max|\n|--:|-------:|-------:|------:|--------:|\n| 50| 4518149| 4715038| 401851| 23667902|\n:::\n:::\n\n\n## Including more than 1 variable\n\nWe can also used `across()`, to include more variables. However, this will join more columns to the table we exported in the last exercise. Therefore, we need to transform, _a little bit_ the output we get.\n* Can you detect any problem with the next code?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncensus %>% \n\tsummarise(\n\t\tacross(c(pop, marriage), \n\t\t\tlist(\n\t\t\t\tn    = ~sum(!is.na(.x)),\n\t\t\t\tmean = ~mean(.x), \n\t\t\t\tsd   = ~sd(.x), \n\t\t\t\tmin  = ~min(.x),\n\t\t\t\tmax  = ~max(.x)\n\t\t\t)\n\t\t)\n\t)\n```\n:::\n\n\nThe last code will have 2 (variables) times 5 (stats) columns. We don't want that. Therefore, let's adjust it as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum_table <- census %>% \n\tsummarise(\n\t\tacross(c(pop, marriage), \n\t\t\tlist(\n\t\t\t\tn    = ~sum(!is.na(.x)),\n\t\t\t\tmean = ~mean(.x), \n\t\t\t\tsd   = ~sd(.x), \n\t\t\t\tmin  = ~min(.x),\n\t\t\t\tmax  = ~max(.x)\n\t\t\t)\n\t\t)\n\t) |> \n\tpivot_longer(everything()) %>% #<<\n\tseparate(name, sep = \"_\", into = c(\"var\", \"stat\")) %>% #<<\n\tpivot_wider( #<<\n\t\tnames_from = \"stat\", values_from = \"value\" #<<\n\t) #<<\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|var      |  n|      mean|         sd|    min|      max|\n|:--------|--:|---------:|----------:|------:|--------:|\n|pop      | 50| 4518149.4| 4715037.75| 401851| 23667902|\n|marriage | 50|   47701.4|   45130.42|   4437|   210864|\n:::\n:::\n\n\n## Descriptive statistics: building your own functions\n\nIn [tutorial 5](../content/05-data-summ.qmd), we will delve into more descriptive analysis but let's try first to use the knowledge we have gained from the three first tutorials.\n\nLet's create a function that is similar to the code we ran before:\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nsum_fun <- function(data, vars){\n\tdata |> #<<\n\t\tsummarise(\n\t\t\tacross( {{vars}}, #<<\n\t\t\t\tlist(\n\t\t\t\t\tn    = ~sum(!is.na(.x)),\n\t\t\t\t\tmean = ~mean(.x), \n\t\t\t\t\tsd   = ~sd(.x), \n\t\t\t\t\tmin  = ~min(.x),\n\t\t\t\t\tmax  = ~max(.x)\n\t\t\t\t)\n\t\t\t)\n\t\t) |> \n\t\tpivot_longer(everything()) %>% \n\t\tseparate(name, sep = \"_\", into = c(\"var\", \"stat\")) %>% \n\t\tpivot_wider(names_from = \"stat\", values_from = \"value\")\n}\n```\n:::\n\n\nWith your new function `sum_fun()`, you can now call it anytime when you need it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum_fun(census, c(pop, marriage, death))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  var          n     mean       sd    min      max\n  <chr>    <dbl>    <dbl>    <dbl>  <dbl>    <dbl>\n1 pop         50 4518149. 4715038. 401851 23667902\n2 marriage    50   47701.   45130.   4437   210864\n3 death       50   39474.   41742.   1604   186428\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|var      |  n|       mean|         sd|    min|      max|\n|:--------|--:|----------:|----------:|------:|--------:|\n|pop      | 50| 4518149.44| 4715037.75| 401851| 23667902|\n|marriage | 50|   47701.40|   45130.42|   4437|   210864|\n|death    | 50|   39474.26|   41742.35|   1604|   186428|\n:::\n:::\n",
    "supporting": [
      "04-data-analysis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}