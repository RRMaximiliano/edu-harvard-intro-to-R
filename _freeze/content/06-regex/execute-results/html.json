{
  "hash": "531b6ab45d46b68d65672459b4821c3b",
  "result": {
    "markdown": "---\ntitle: \"Regular Expressions in R with tidyverse\"\nauthor: \"Rony Rodriguez-Ramirez\"\ndate: \"2024-02-03\"\n---\n\n\n\n\n# Introduction to Regular Expressions\n\nRegular expressions are a powerful tool for pattern matching, searching, and replacing text. R, through the `stringr` package from the tidyverse, provides a suite of functions that make working with regular expressions straightforward.\n\n## Basic Concepts\n\nA regular expression is a sequence of characters that forms a search pattern. It can be used to check if a string contains the specified search pattern.\n\n### Commonly Used Metacharacters:\n\n- `.`: Matches any single character.\n- `^`: Matches the start of a string.\n- `$`: Matches the end of a string.\n- `*`: Matches zero or more occurrences of the preceding element.\n- `+`: Matches one or more occurrences of the preceding element.\n- `?`: Matches zero or one occurrence of the preceding element.\n- `\\\\d`: Matches any digits.\n- `\\\\w`: Matches any word character (alphanumeric or underscore).\n- `[...]`: Matches any single character contained within the brackets.\n- `|`: Logical OR operator.\n\n## Using `stringr` for Regex Operations\n\nThe `stringr` package simplifies the use of regular expressions in R. Here are some common functions:\n\n### Pattern Matching with `str_detect()`\n\nChecks if strings match a pattern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexts <- c(\"apple\", \"banana\", \"pear\", \"orange\")\nstr_detect(texts, pattern = \"a\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE\n```\n:::\n:::\n\n\n### Extracting Matches with `str_extract()`\n\nExtracts the first occurrence of a pattern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(texts, pattern = \"\\\\b[a-z]*a\\\\b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA       \"banana\" NA       NA      \n```\n:::\n:::\n\n\n### Replacing Text with `str_replace()`\n\nReplaces the first occurrence of a pattern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace(texts, pattern = \"a\", replacement = \"@\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"@pple\"  \"b@nana\" \"pe@r\"   \"or@nge\"\n```\n:::\n:::\n\n\n### Splitting Strings with `str_split()`\n\nSplits strings based on a pattern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split(texts, pattern = \"a\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"\"     \"pple\"\n\n[[2]]\n[1] \"b\" \"n\" \"n\" \"\" \n\n[[3]]\n[1] \"pe\" \"r\" \n\n[[4]]\n[1] \"or\"  \"nge\"\n```\n:::\n:::\n\n\n## Advanced Examples\n\n### Extracting Emails from Text\n\nUsing a more complex regex to find email addresses in a string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_text <- \"Contact us at info@example.com or support@example.org\"\nemail_pattern <- \"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,}\"\nstr_extract_all(sample_text, pattern = email_pattern)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"info@example.com\"    \"support@example.org\"\n```\n:::\n:::\n\n\n### Validating Phone Numbers\n\nCheck if strings are valid phone numbers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphone_numbers <- c(\"123-456-7890\", \"987 654 3210\", \"Invalid Number\")\nphone_pattern <- \"^\\\\d{3}[- ]?\\\\d{3}[- ]?\\\\d{4}$\"\nstr_detect(phone_numbers, pattern = phone_pattern)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\n## Conclusion\n\nRegular expressions are a versatile and powerful tool for text processing. The `stringr` package from the tidyverse makes regex operations in R both accessible and efficient. By mastering regular expressions, you can perform complex text manipulations and data cleaning tasks with ease.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}