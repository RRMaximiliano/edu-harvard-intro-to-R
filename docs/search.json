[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Intro to R for PhD Students in Education",
    "section": "",
    "text": "Hello, I’m Rony Rodriguez-Ramirez, and this website is my personal project to provide PhD students in Education with tutorials, resources, and tools aimed at enhancing their research and academic skills. This initiative is designed to support your journey through the PhD program with practical and accessible learning materials."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "content/01-basics.html",
    "href": "content/01-basics.html",
    "title": "Introduction to R: The Basics",
    "section": "",
    "text": "Welcome to this introductory tutorial on R! R is a powerful language and environment for statistical computing and graphics. It offers a wide variety of statistical and graphical techniques and is highly extensible. One of the key features of R is its package ecosystem, the most notable of which is the tidyverse, a collection of packages designed for data science.\nThis tutorial is designed for individuals with minimal statistical background. We will cover the basics of R, including how to install and load packages, import data, perform simple data manipulations, and create basic visualizations.\n\n\nBefore we begin, you need to have R and RStudio installed on your computer. R is the underlying statistical computing environment, while RStudio provides a convenient and powerful user interface.\n\nDownload R from The Comprehensive R Archive Network (CRAN).\nDownload RStudio from RStudio’s website.\n\n\n\n\n\n\nOpen RStudio and let’s get started by installing and loading the tidyverse package:\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nThe first line will install the package, and the second will load the package to your current R session. After you install your package, you do not need to use the first line again in your scripts.\n\n\n\n\nR can be used as a simple calculator. Try typing 2 + 2 in the console. You can assign values to variables using &lt;-.\n\nx &lt;- 2 + 2\nx\n\n[1] 4\n\n\n\n\n\nVectors are basic data structures in R that contain elements of the same type. Use the c() function to create a vector:\n\nmy_vector &lt;- c(1, 2, 3, 4, 5)\nmy_vector\n\n[1] 1 2 3 4 5\n\n\nA data frame is a table or a two-dimensional array-like structure. Let’s create a simple data frame:\n\nmy_data_frame &lt;- data.frame(\n  id = 1:5,\n  name = c(\"Emma\", \"Rony\", \"Jostin\", \"David\", \"Alex\"),\n  score = c(90, 85, 88, 95, 80)\n)\n\nmy_data_frame\n\n  id   name score\n1  1   Emma    90\n2  2   Rony    85\n3  3 Jostin    88\n4  4  David    95\n5  5   Alex    80\n\n\n\n\n\nR can read data from various sources. The read_csv() function from the readr package (part of the tidyverse) is commonly used for reading CSV files:\n\nmy_data &lt;- read_csv(\"path/to/your/file.csv\")\n\nReplace “path/to/your/file.csv” with the actual file path to a csv file.\n\n\n\nThe dplyr package offers a set of functions for manipulating data frames:\nfilter(): Extracts a subset of rows based on conditions. select(): Selects columns by name. mutate(): Creates new columns or modifies existing ones. summarise(): Summarizes multiple values into a single value.\nHowever, before we use the dplyr package, let’s understand the pipe operator.\n\n\nThe pipe operator %&gt;%, heavily used in tidyverse packages, allows you to pass the result of one expression as the first argument to the next expression. It’s a powerful tool for chaining together a sequence of operations in a clear and concise manner. Instead of nesting functions or using intermediate variables, you can use the pipe operator to form a pipeline of operations.\n\n\n\nConsider a simple example without the pipe operator:\n\nresult &lt;- sum(c(1, 2, 3, 4, 5))\nresult\n\n[1] 15\n\n\nWith the pipe operator, the same operation looks like this:\n\nc(1, 2, 3, 4, 5) %&gt;%\n  sum() \n\n[1] 15\n\n\nAlthough this is a simplistic example, it illustrates how %&gt;% passes the left-hand side of the operator as the first argument to the function on the right-hand side. This becomes particularly useful with functions from the dplyr package for data manipulation.\n\n\n\nLet’s revisit the dplyr package from earlier, now with an emphasis on understanding the pipe operator:\n\nfiltered_data &lt;- my_data_frame %&gt;%\n  filter(score &gt; 85) %&gt;%\n  select(name, score)\n\nIn this example:\n\nmy_data_frame is passed as the first argument to the filter() function, which filters rows where score &gt; 85.\nThe result of filter() is then passed as the first argument to select(), which keeps only the columns name and score.\nThe final result is assigned to filtered_data.\n\nBenefits of Using the Pipe Operator\n\nReadability: The flow of operations is from left to right, similar to how we read text, making the code easier to follow.\nMaintainability: It’s easier to add or remove steps in the data processing pipeline without having to rewrite function calls or manage temporary variables.\nClarity: Each step in the pipeline can be clearly seen, making it easier to understand what each part of the code is doing.\n\nThe pipe operator is a cornerstone of the tidyverse approach to data manipulation, enabling clear and expressive code that closely resembles natural language. As you become more familiar with R and the tidyverse, you’ll find the pipe operator indispensable for efficient data analysis and transformation.\n\n\n\nThe mutate() function allows you to create new columns in your data frame or change existing ones based on some operations or functions applied to the data. It’s particularly useful for feature engineering, calculating new metrics, or preparing your data for analysis.\nLet’s say we have a data frame my_data_frame that contains student IDs, names, and scores. We want to add a new column that shows whether each student passed based on their score, with a score of 85 or above considered a pass.\n\n# Add a new column 'passed' with boolean values: TRUE if score &gt;= 85, FALSE otherwise\nmy_data_frame &lt;- my_data_frame %&gt;%\n  mutate(passed = score &gt;= 85)\n\nmy_data_frame\n\n  id   name score passed\n1  1   Emma    90   TRUE\n2  2   Rony    85   TRUE\n3  3 Jostin    88   TRUE\n4  4  David    95   TRUE\n5  5   Alex    80  FALSE\n\n\nThis will add a new column passed to my_data_frame, where each row will have TRUE if the student’s score is 85 or higher, and FALSE otherwise.\n\n\nYou can also use mutate() to modify existing columns. For example, suppose you want to standardize the scores (subtract the mean and divide by the standard deviation) for analysis.\n\n# Standardize the 'score' column\nmy_data_frame &lt;- my_data_frame %&gt;%\n  mutate(score_standardized = (score - mean(score)) / sd(score))\n\nmy_data_frame\n\n  id   name score passed score_standardized\n1  1   Emma    90   TRUE          0.4289820\n2  2   Rony    85   TRUE         -0.4647305\n3  3 Jostin    88   TRUE          0.0714970\n4  4  David    95   TRUE          1.3226945\n5  5   Alex    80  FALSE         -1.3584430\n\n\nThis operation creates a new column score_standardized where each student’s score is standardized.\n\n\n\nYou can chain multiple operations within a single mutate() call. For example, if you wanted to add a column for the grade (A, B, C, etc.) based on the standardized score, you could do it within the same mutate():\n\n# Add a grade column based on standardized scores\nmy_data_frame &lt;- my_data_frame %&gt;%\n  mutate(\n    score_standardized = (score - mean(score)) / sd(score),\n    grade = case_when(\n      score_standardized &gt;= 1  ~ \"A\",\n      score_standardized &gt;= 0  ~ \"B\",\n      score_standardized &lt; 0   ~ \"C\"\n    )\n  )\n\nmy_data_frame\n\n  id   name score passed score_standardized grade\n1  1   Emma    90   TRUE          0.4289820     B\n2  2   Rony    85   TRUE         -0.4647305     C\n3  3 Jostin    88   TRUE          0.0714970     B\n4  4  David    95   TRUE          1.3226945     A\n5  5   Alex    80  FALSE         -1.3584430     C\n\n\nIn this example, case_when() is used to assign grades: “A” for standardized scores &gt;= 1, “B” for scores &gt;= 0 and &lt; 1, and “C” for scores &lt; 0. This illustrates how mutate() can be used to perform multiple transformations simultaneously, enhancing the readability and efficiency of your data manipulation code.\n\n\n\n\n\nThe summarise() function in dplyr is used to create summary statistics for a dataset or subsets of a dataset. This function can be particularly powerful when combined with group_by(), which groups the data frame by one or more variables.\n\n\nHere’s how you can use summarise() to calculate the average (mean) score of all students in my_data_frame:\n\naverage_score &lt;- my_data_frame %&gt;%\n  summarise(mean_score = mean(score))\n\naverage_score\n\n  mean_score\n1       87.6\n\n\nThis code calculates the mean of the score column and stores the result in a new data frame called average_score with a single column mean_score.\n\n\n\nTo calculate the average score by a categorical variable (e.g., by a hypothetical class column), you first group the data by that variable using group_by(), then apply summarise():\nFirst, let’s add a hypothetical class variable to our data frame to categorize students into two classes, “A” and “B”. We’ll use the mutate() function to accomplish this:\n\nmy_data_frame &lt;- my_data_frame %&gt;%\n  mutate(class = if_else(id %% 2 == 0, \"A\", \"B\"))\n\nmy_data_frame\n\n  id   name score passed score_standardized grade class\n1  1   Emma    90   TRUE          0.4289820     B     B\n2  2   Rony    85   TRUE         -0.4647305     C     A\n3  3 Jostin    88   TRUE          0.0714970     B     B\n4  4  David    95   TRUE          1.3226945     A     A\n5  5   Alex    80  FALSE         -1.3584430     C     B\n\n\nThis code adds a new column class to my_data_frame, where students with an even id are assigned to class “A” and students with an odd id are assigned to class “B”.\nNow that we have a class variable, we can calculate the average score for each class:\n\naverage_score_by_class &lt;- my_data_frame %&gt;%\n  group_by(class) %&gt;%\n  summarise(mean_score = mean(score))\n\naverage_score_by_class\n\n# A tibble: 2 × 2\n  class mean_score\n  &lt;chr&gt;      &lt;dbl&gt;\n1 A             90\n2 B             86\n\n\nThis will calculate the mean score for each class separately.\n\n\n\nYou can also use summarise() to apply multiple summary functions at once. For example, to calculate the mean, median, and standard deviation of scores:\n\nsummary_statistics &lt;- my_data_frame %&gt;%\n  summarise(\n    mean_score = mean(score),\n    median_score = median(score),\n    sd_score = sd(score)\n  )\n\nsummary_statistics\n\n  mean_score median_score sd_score\n1       87.6           88  5.59464\n\n\n\n\n\nWhile summarise() reduces your data to a single summary row, mutate() can be used alongside to add summary columns to the original data frame. For example, adding a column with the mean score to each row:\n\nmy_data_frame_with_mean &lt;- my_data_frame %&gt;%\n  mutate(mean_score = mean(score))\n\nmy_data_frame_with_mean\n\n  id   name score passed score_standardized grade class mean_score\n1  1   Emma    90   TRUE          0.4289820     B     B       87.6\n2  2   Rony    85   TRUE         -0.4647305     C     A       87.6\n3  3 Jostin    88   TRUE          0.0714970     B     B       87.6\n4  4  David    95   TRUE          1.3226945     A     A       87.6\n5  5   Alex    80  FALSE         -1.3584430     C     B       87.6\n\n\n\n\n\n\nggplot2 is a part of the tidyverse that allows for creating complex and beautiful visualizations using a consistent and intuitive syntax. The name ggplot2 is derived from the concept of the grammar of graphics, a system for describing and building a wide range of graphics.\n\n\nA ggplot2 graph is built up from a few basic elements:\n\nData: The dataset you want to visualize.\nAesthetics (aes): Defines how variables in the data are mapped to visual properties (aesthetics) of the graph such as x and y axes, color, size, etc.\nGeometries (geom_ functions): The geometric objects (shapes) that represent the data points. For example, points (geom_point() for scatter plots), lines (geom_line()), and bars (geom_bar() for bar charts).\n\n\n\n\nLet’s create a simple scatter plot to visualize the relationship between two variables in my_data_frame.\n\nggplot(my_data_frame, aes(x = id, y = score)) +\n  geom_point()\n\n\n\n\nIn this example, ggplot() initializes the plot with the data frame my_data_frame, and aes(x = id, y = score) specifies that id should be on the x-axis and score on the y-axis. geom_point() adds points to represent each row in the dataset.\n\n\n\nggplot2 offers extensive customization options. For example, you can add titles and labels, change the theme, and modify the color of the points.\n\nggplot(my_data_frame, aes(x = id, y = score)) +\n  geom_point(color = \"blue\") +\n  labs(title = \"Student Scores\", x = \"ID\", y = \"Score\") +\n  theme_minimal()\n\n\n\n\nThis adds a title to the plot, labels the x and y axes, changes the point color to blue, and applies a minimal theme for a cleaner look.\n\n\n\nTo create a bar chart showing students by score, you can use geom_col().\n\nggplot(my_data_frame, aes(y = score, x = as.factor(name))) +\n  geom_col(color = \"black\", fill = \"grey\") +\n  labs(title = \"Students by Score\", x = NULL, y = \"Score\") +\n  theme_minimal()\n\n\n\n\nHere, as.factor(name) is used to treat the name variable as a categorical variable. geom_bar() by default counts the number of occurrences of each unique value.\nggplot2 is a versatile and powerful tool for creating visualizations in R. With its consistent syntax and comprehensive features, it allows you to construct a wide variety of graph types, from simple scatter plots to complex multi-layered graphics. As you become more familiar with ggplot2, you will discover its full potential for conveying information in a visual format.\nCertainly! Let’s add a section on the summarise() function from the dplyr package. summarise() is used to reduce each group of a data frame to a single summary value, making it essential for data analysis tasks such as calculating summaries (mean, median, sum, etc.) across groups."
  },
  {
    "objectID": "content/01-basics.html#installing-r-and-rstudio",
    "href": "content/01-basics.html#installing-r-and-rstudio",
    "title": "Introduction to R: The Basics",
    "section": "",
    "text": "Before we begin, you need to have R and RStudio installed on your computer. R is the underlying statistical computing environment, while RStudio provides a convenient and powerful user interface.\n\nDownload R from The Comprehensive R Archive Network (CRAN).\nDownload RStudio from RStudio’s website."
  },
  {
    "objectID": "content/01-basics.html#getting-started",
    "href": "content/01-basics.html#getting-started",
    "title": "Introduction to R: The Basics",
    "section": "",
    "text": "Open RStudio and let’s get started by installing and loading the tidyverse package:\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\nThe first line will install the package, and the second will load the package to your current R session. After you install your package, you do not need to use the first line again in your scripts."
  },
  {
    "objectID": "content/01-basics.html#basic-r-operations",
    "href": "content/01-basics.html#basic-r-operations",
    "title": "Introduction to R: The Basics",
    "section": "",
    "text": "R can be used as a simple calculator. Try typing 2 + 2 in the console. You can assign values to variables using &lt;-.\n\nx &lt;- 2 + 2\nx\n\n[1] 4"
  },
  {
    "objectID": "content/01-basics.html#vectors-and-data-frames",
    "href": "content/01-basics.html#vectors-and-data-frames",
    "title": "Introduction to R: The Basics",
    "section": "",
    "text": "Vectors are basic data structures in R that contain elements of the same type. Use the c() function to create a vector:\n\nmy_vector &lt;- c(1, 2, 3, 4, 5)\nmy_vector\n\n[1] 1 2 3 4 5\n\n\nA data frame is a table or a two-dimensional array-like structure. Let’s create a simple data frame:\n\nmy_data_frame &lt;- data.frame(\n  id = 1:5,\n  name = c(\"Emma\", \"Rony\", \"Jostin\", \"David\", \"Alex\"),\n  score = c(90, 85, 88, 95, 80)\n)\n\nmy_data_frame\n\n  id   name score\n1  1   Emma    90\n2  2   Rony    85\n3  3 Jostin    88\n4  4  David    95\n5  5   Alex    80"
  },
  {
    "objectID": "content/01-basics.html#importing-data",
    "href": "content/01-basics.html#importing-data",
    "title": "Introduction to R: The Basics",
    "section": "",
    "text": "R can read data from various sources. The read_csv() function from the readr package (part of the tidyverse) is commonly used for reading CSV files:\n\nmy_data &lt;- read_csv(\"path/to/your/file.csv\")\n\nReplace “path/to/your/file.csv” with the actual file path to a csv file."
  },
  {
    "objectID": "content/01-basics.html#data-manipulation-with-dplyr",
    "href": "content/01-basics.html#data-manipulation-with-dplyr",
    "title": "Introduction to R: The Basics",
    "section": "",
    "text": "The dplyr package offers a set of functions for manipulating data frames:\nfilter(): Extracts a subset of rows based on conditions. select(): Selects columns by name. mutate(): Creates new columns or modifies existing ones. summarise(): Summarizes multiple values into a single value.\nHowever, before we use the dplyr package, let’s understand the pipe operator.\n\n\nThe pipe operator %&gt;%, heavily used in tidyverse packages, allows you to pass the result of one expression as the first argument to the next expression. It’s a powerful tool for chaining together a sequence of operations in a clear and concise manner. Instead of nesting functions or using intermediate variables, you can use the pipe operator to form a pipeline of operations.\n\n\n\nConsider a simple example without the pipe operator:\n\nresult &lt;- sum(c(1, 2, 3, 4, 5))\nresult\n\n[1] 15\n\n\nWith the pipe operator, the same operation looks like this:\n\nc(1, 2, 3, 4, 5) %&gt;%\n  sum() \n\n[1] 15\n\n\nAlthough this is a simplistic example, it illustrates how %&gt;% passes the left-hand side of the operator as the first argument to the function on the right-hand side. This becomes particularly useful with functions from the dplyr package for data manipulation.\n\n\n\nLet’s revisit the dplyr package from earlier, now with an emphasis on understanding the pipe operator:\n\nfiltered_data &lt;- my_data_frame %&gt;%\n  filter(score &gt; 85) %&gt;%\n  select(name, score)\n\nIn this example:\n\nmy_data_frame is passed as the first argument to the filter() function, which filters rows where score &gt; 85.\nThe result of filter() is then passed as the first argument to select(), which keeps only the columns name and score.\nThe final result is assigned to filtered_data.\n\nBenefits of Using the Pipe Operator\n\nReadability: The flow of operations is from left to right, similar to how we read text, making the code easier to follow.\nMaintainability: It’s easier to add or remove steps in the data processing pipeline without having to rewrite function calls or manage temporary variables.\nClarity: Each step in the pipeline can be clearly seen, making it easier to understand what each part of the code is doing.\n\nThe pipe operator is a cornerstone of the tidyverse approach to data manipulation, enabling clear and expressive code that closely resembles natural language. As you become more familiar with R and the tidyverse, you’ll find the pipe operator indispensable for efficient data analysis and transformation.\n\n\n\nThe mutate() function allows you to create new columns in your data frame or change existing ones based on some operations or functions applied to the data. It’s particularly useful for feature engineering, calculating new metrics, or preparing your data for analysis.\nLet’s say we have a data frame my_data_frame that contains student IDs, names, and scores. We want to add a new column that shows whether each student passed based on their score, with a score of 85 or above considered a pass.\n\n# Add a new column 'passed' with boolean values: TRUE if score &gt;= 85, FALSE otherwise\nmy_data_frame &lt;- my_data_frame %&gt;%\n  mutate(passed = score &gt;= 85)\n\nmy_data_frame\n\n  id   name score passed\n1  1   Emma    90   TRUE\n2  2   Rony    85   TRUE\n3  3 Jostin    88   TRUE\n4  4  David    95   TRUE\n5  5   Alex    80  FALSE\n\n\nThis will add a new column passed to my_data_frame, where each row will have TRUE if the student’s score is 85 or higher, and FALSE otherwise.\n\n\nYou can also use mutate() to modify existing columns. For example, suppose you want to standardize the scores (subtract the mean and divide by the standard deviation) for analysis.\n\n# Standardize the 'score' column\nmy_data_frame &lt;- my_data_frame %&gt;%\n  mutate(score_standardized = (score - mean(score)) / sd(score))\n\nmy_data_frame\n\n  id   name score passed score_standardized\n1  1   Emma    90   TRUE          0.4289820\n2  2   Rony    85   TRUE         -0.4647305\n3  3 Jostin    88   TRUE          0.0714970\n4  4  David    95   TRUE          1.3226945\n5  5   Alex    80  FALSE         -1.3584430\n\n\nThis operation creates a new column score_standardized where each student’s score is standardized.\n\n\n\nYou can chain multiple operations within a single mutate() call. For example, if you wanted to add a column for the grade (A, B, C, etc.) based on the standardized score, you could do it within the same mutate():\n\n# Add a grade column based on standardized scores\nmy_data_frame &lt;- my_data_frame %&gt;%\n  mutate(\n    score_standardized = (score - mean(score)) / sd(score),\n    grade = case_when(\n      score_standardized &gt;= 1  ~ \"A\",\n      score_standardized &gt;= 0  ~ \"B\",\n      score_standardized &lt; 0   ~ \"C\"\n    )\n  )\n\nmy_data_frame\n\n  id   name score passed score_standardized grade\n1  1   Emma    90   TRUE          0.4289820     B\n2  2   Rony    85   TRUE         -0.4647305     C\n3  3 Jostin    88   TRUE          0.0714970     B\n4  4  David    95   TRUE          1.3226945     A\n5  5   Alex    80  FALSE         -1.3584430     C\n\n\nIn this example, case_when() is used to assign grades: “A” for standardized scores &gt;= 1, “B” for scores &gt;= 0 and &lt; 1, and “C” for scores &lt; 0. This illustrates how mutate() can be used to perform multiple transformations simultaneously, enhancing the readability and efficiency of your data manipulation code."
  },
  {
    "objectID": "content/01-basics.html#summarizing-data-with-summarise",
    "href": "content/01-basics.html#summarizing-data-with-summarise",
    "title": "Introduction to R: The Basics",
    "section": "",
    "text": "The summarise() function in dplyr is used to create summary statistics for a dataset or subsets of a dataset. This function can be particularly powerful when combined with group_by(), which groups the data frame by one or more variables.\n\n\nHere’s how you can use summarise() to calculate the average (mean) score of all students in my_data_frame:\n\naverage_score &lt;- my_data_frame %&gt;%\n  summarise(mean_score = mean(score))\n\naverage_score\n\n  mean_score\n1       87.6\n\n\nThis code calculates the mean of the score column and stores the result in a new data frame called average_score with a single column mean_score.\n\n\n\nTo calculate the average score by a categorical variable (e.g., by a hypothetical class column), you first group the data by that variable using group_by(), then apply summarise():\nFirst, let’s add a hypothetical class variable to our data frame to categorize students into two classes, “A” and “B”. We’ll use the mutate() function to accomplish this:\n\nmy_data_frame &lt;- my_data_frame %&gt;%\n  mutate(class = if_else(id %% 2 == 0, \"A\", \"B\"))\n\nmy_data_frame\n\n  id   name score passed score_standardized grade class\n1  1   Emma    90   TRUE          0.4289820     B     B\n2  2   Rony    85   TRUE         -0.4647305     C     A\n3  3 Jostin    88   TRUE          0.0714970     B     B\n4  4  David    95   TRUE          1.3226945     A     A\n5  5   Alex    80  FALSE         -1.3584430     C     B\n\n\nThis code adds a new column class to my_data_frame, where students with an even id are assigned to class “A” and students with an odd id are assigned to class “B”.\nNow that we have a class variable, we can calculate the average score for each class:\n\naverage_score_by_class &lt;- my_data_frame %&gt;%\n  group_by(class) %&gt;%\n  summarise(mean_score = mean(score))\n\naverage_score_by_class\n\n# A tibble: 2 × 2\n  class mean_score\n  &lt;chr&gt;      &lt;dbl&gt;\n1 A             90\n2 B             86\n\n\nThis will calculate the mean score for each class separately.\n\n\n\nYou can also use summarise() to apply multiple summary functions at once. For example, to calculate the mean, median, and standard deviation of scores:\n\nsummary_statistics &lt;- my_data_frame %&gt;%\n  summarise(\n    mean_score = mean(score),\n    median_score = median(score),\n    sd_score = sd(score)\n  )\n\nsummary_statistics\n\n  mean_score median_score sd_score\n1       87.6           88  5.59464\n\n\n\n\n\nWhile summarise() reduces your data to a single summary row, mutate() can be used alongside to add summary columns to the original data frame. For example, adding a column with the mean score to each row:\n\nmy_data_frame_with_mean &lt;- my_data_frame %&gt;%\n  mutate(mean_score = mean(score))\n\nmy_data_frame_with_mean\n\n  id   name score passed score_standardized grade class mean_score\n1  1   Emma    90   TRUE          0.4289820     B     B       87.6\n2  2   Rony    85   TRUE         -0.4647305     C     A       87.6\n3  3 Jostin    88   TRUE          0.0714970     B     B       87.6\n4  4  David    95   TRUE          1.3226945     A     A       87.6\n5  5   Alex    80  FALSE         -1.3584430     C     B       87.6"
  },
  {
    "objectID": "content/01-basics.html#data-visualization-with-ggplot2",
    "href": "content/01-basics.html#data-visualization-with-ggplot2",
    "title": "Introduction to R: The Basics",
    "section": "",
    "text": "ggplot2 is a part of the tidyverse that allows for creating complex and beautiful visualizations using a consistent and intuitive syntax. The name ggplot2 is derived from the concept of the grammar of graphics, a system for describing and building a wide range of graphics.\n\n\nA ggplot2 graph is built up from a few basic elements:\n\nData: The dataset you want to visualize.\nAesthetics (aes): Defines how variables in the data are mapped to visual properties (aesthetics) of the graph such as x and y axes, color, size, etc.\nGeometries (geom_ functions): The geometric objects (shapes) that represent the data points. For example, points (geom_point() for scatter plots), lines (geom_line()), and bars (geom_bar() for bar charts).\n\n\n\n\nLet’s create a simple scatter plot to visualize the relationship between two variables in my_data_frame.\n\nggplot(my_data_frame, aes(x = id, y = score)) +\n  geom_point()\n\n\n\n\nIn this example, ggplot() initializes the plot with the data frame my_data_frame, and aes(x = id, y = score) specifies that id should be on the x-axis and score on the y-axis. geom_point() adds points to represent each row in the dataset.\n\n\n\nggplot2 offers extensive customization options. For example, you can add titles and labels, change the theme, and modify the color of the points.\n\nggplot(my_data_frame, aes(x = id, y = score)) +\n  geom_point(color = \"blue\") +\n  labs(title = \"Student Scores\", x = \"ID\", y = \"Score\") +\n  theme_minimal()\n\n\n\n\nThis adds a title to the plot, labels the x and y axes, changes the point color to blue, and applies a minimal theme for a cleaner look.\n\n\n\nTo create a bar chart showing students by score, you can use geom_col().\n\nggplot(my_data_frame, aes(y = score, x = as.factor(name))) +\n  geom_col(color = \"black\", fill = \"grey\") +\n  labs(title = \"Students by Score\", x = NULL, y = \"Score\") +\n  theme_minimal()\n\n\n\n\nHere, as.factor(name) is used to treat the name variable as a categorical variable. geom_bar() by default counts the number of occurrences of each unique value.\nggplot2 is a versatile and powerful tool for creating visualizations in R. With its consistent syntax and comprehensive features, it allows you to construct a wide variety of graph types, from simple scatter plots to complex multi-layered graphics. As you become more familiar with ggplot2, you will discover its full potential for conveying information in a visual format.\nCertainly! Let’s add a section on the summarise() function from the dplyr package. summarise() is used to reduce each group of a data frame to a single summary value, making it essential for data analysis tasks such as calculating summaries (mean, median, sum, etc.) across groups."
  },
  {
    "objectID": "index.html#about-this-project",
    "href": "index.html#about-this-project",
    "title": "Welcome to Intro to R for PhD Students in Education",
    "section": "About This Project",
    "text": "About This Project\nThis project is a work in progress, and I am constantly looking to update and improve the content. I welcome any suggestions, feedback, or contributions you might have."
  },
  {
    "objectID": "index.html#tutorials",
    "href": "index.html#tutorials",
    "title": "Welcome to Intro to R for PhD Students in Education",
    "section": "Tutorials",
    "text": "Tutorials\nI’ve crafted these tutorials to cater to a broad spectrum of needs, from the basics of statistical analysis using R, to more nuanced discussions on quantitative research methodologies. Here are a few highlights:\n\nTo complete"
  },
  {
    "objectID": "index.html#additional-resources",
    "href": "index.html#additional-resources",
    "title": "Welcome to Intro to R for PhD Students in Education",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nTo complete\n\nThank you for visiting, and I hope you find these resources helpful on your academic path!\n\n\n© 2024 Rony Rodriguez-Ramirez"
  },
  {
    "objectID": "index.html#lets-collaborate",
    "href": "index.html#lets-collaborate",
    "title": "Welcome Intro to R for PhD Students in Education",
    "section": "Let’s Collaborate",
    "text": "Let’s Collaborate\nI am the sole author and creator behind this project, and it is a labor of love. I am always open to suggestions for new content, improvements to existing materials, or any other feedback you might have. If you’d like to contribute or share your thoughts, please feel free to contact me.\nThank you for visiting, and I hope you find these resources helpful on your academic path!\n\n\n© 2024 Rony Rodriguez-Ramirez"
  },
  {
    "objectID": "content/index.html",
    "href": "content/index.html",
    "title": "Readings, lectures, and videos",
    "section": "",
    "text": "Each tutorial has a set of required readings that you should complete before watching the lecture."
  }
]