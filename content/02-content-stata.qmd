---
title: "Exploring data in Stata"
author: "Rony Rodriguez-Ramirez"
date: "2024-02-10"
---

```{r, echo=FALSE, message=FALSE}
library(Statamarkdown)
library(knitr)
stataexe <- "C:/Program Files/Stata18/StataMP-64.exe"
knitr::opts_chunk$set(
  error = TRUE,
  cleanlog = FALSE,
  savedo = FALSE,
    engine.path = list(stata = stataexe)
)
hook_output <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
  lines <- options$output.lines
  if (is.null(lines)) {
    return(hook_output(x, options))  # pass to default hook
  }
  x <- unlist(strsplit(x, "\n"))
  more <- ""
  if (length(lines)==1) {        # first n lines
    if (length(x) > lines) {
      # truncate the output, but add ....
      x <- c(head(x, lines), more)
    }
  } else {
    x <- c(more, x[lines], more)
  }
  # paste these lines together
  x <- paste(c(x, ""), collapse = "\n")
  hook_output(x, options)
})
```

## Introduction

In the last tutorial, we learned some Stata basics. We are going to continue with the basics in a more "Stata" friendly way. Let's start by loading our dataset `fake_scores.dta`. You can find this dataset in the repository, or download directly it from [here](https://github.com/RRMaximiliano/edu-harvard-programming/blob/master/files/data/fake_scores.dta).


```{stata, collectcode = TRUE, results = "hide"}
use "../files/data/fake_scores.dta", clear
```

## Viewing a dataset

### Useful commands to explore data sets

As we explore variables of different types, we will learn how to use the following Stata commands:

- `browse`: See all data in spreadsheet format
- `summarize`: Basic statistics for numeric variables
- `describe`: List of all variables in the data set in memory
- `codebook`: List of all variables in the data set in memory
- `tabulate`: Show a frequency table
- `histogram`: Visualize the distribution of a continuous or discrete variable
- `graph bar`: Visualize continuous variables over discrete or categorical variables
- `graph pie`: Visualize groups in a categorical variable

### Exploring a data set

- The first command we will use to explore our data set today is `browse`
- Another very useful command is `summarize`
- It can be used to display basic statistics for the entire dataset or for some variables and observations

Let's use `summarize` to see descriptive statistics for the entire dataset.

```{stata, output.lines=-(1:5)}
summarize
```

### Exploring a data set: `describe`

- The next command we will use is called `describe`
- This command is used to view metadata, that is, data about the data

```{stata, output.lines=-(1:5)}
describe
```

`describe` is particularly useful to identify types of variables.

### Exploring numeric variables

Based on what we saw in the result for `describe`, let's take a look at how we can see information about them.

```{stata, output.lines=-(1:5)}
codebook score
```

### Subsetting observations

- The expression `if` allows us to subset observations, that is, we can choose observations based on a logical condition.

```{stata, eval = FALSE}
browse if missing(score)
```

### Exploring text (string) variables

- The process data set we are using contains two text variables: `student` and `course`.

```{stata, output.lines=-(1:5)}
codebook student course
```

### Exploring categorical variables

As we noted when using `describe`, one way to identify categorical variables is when they have *value labels*. 

```{stata, output.lines=-(1:5)}
codebook concentration
```

### Exploring categorical variables

- The command `tabulate` counts the number of observations that take each value in a categorical variable.

```{stata, output.lines=-(1:5)}
tabulate concentration
```

### Commenting do-files

- Comments are used to organize and explain the code so it is easier for you to read it and edit it later on.

```{stata, eval = FALSE}
* Explore the categorical variables process_type
tabulate concentration // Simple tabulation
```
