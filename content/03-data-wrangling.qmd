---
title: "Data Wrangling"
author: "Rony Rodriguez-Ramirez"
date: "2024-02-02"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
```


## Introduction

In this tutorial, we delve into advanced data cleaning and analysis techniques focusing on student and department datasets. We will also demonstrate how to create custom functions in R to automate repetitive tasks in data analysis. We will delve into more sophisticated techniques such as reshaping data with `pivot_wider` and `pivot_longer`, and enhancing our data transformation skills with `mutate` across and the creation of custom functions. These methods are pivotal for preparing and analyzing data more effectively.

## Reshaping Data

Reshaping data is a common task in data analysis that involves changing the structure of your data to make it more suitable for analysis. `tidyverse` provides two primary functions for this purpose: `pivot_longer` and `pivot_wider`.

### Using `pivot_longer`

When you have data in a wide format and want to make it longer, `pivot_longer` is your go-to function. It's especially useful for converting multiple columns into key-value pairs, making the data tidy.

```{r pivot_longer_example}
# Sample wide data
wide_data <- tibble(
  id = 1:3,
  year_2018 = c(200, 150, 120),
  year_2019 = c(220, 160, 130)
)

# Converting wide data to long format
long_data <- wide_data %>%
  pivot_longer(
    cols = starts_with("year"),
    names_to = "year",
    values_to = "value"
  )
long_data
```

### Using `pivot_wider`

Conversely, `pivot_wider` is used to spread a key-value pair across multiple columns, transforming longer data into a wider format. This is particularly useful for making data more readable or preparing it for certain types of analysis.

```{r pivot_wider_example}
# Converting back to wide format
wider_data <- long_data %>%
  pivot_wider(
    names_from = year,
    values_from = value
  )

wider_data
```

## Enhancing Data Transformation with `mutate` and Custom Functions

### Using `mutate` and `across`

With `mutate` `across`, you can apply a function across multiple columns at once, streamlining the process of data manipulation.

```{r mutate_across_example}
# Applying a transformation across selected columns
data <- tibble(
  x1 = rnorm(5),
  x2 = rnorm(5),
  x3 = rnorm(5)
)

# Standardizing selected columns
data <- data %>%
  mutate(
    across(
      starts_with("x"), 
      ~(.x - mean(.x)) / sd(.x),
      .names = "std_{.col}"
    )
  )
```

1. **`mutate()`**: This function is used to add new columns or transform existing ones in a dataframe. Here, it is combined with the `across()` function to apply a transformation across multiple columns.
   
2. **`across(starts_with("x"), ~(x. - mean(.x)) / sd(.x))`**: The `across()` function specifies which columns to operate on and the operation to perform:
   
   - **`starts_with("x")`**: This argument selects all columns whose names start with "x".
   
   - **`~(.x - mean(.x)) / sd(.x)`**: This formula calculates the z-score for each selected column. For each value in a column, it subtracts the mean of that column and then divides by the standard deviation of that column. The `.` symbol represents the current column's values being processed.
   - The `.names = "std_{.col}"` argument in the `across()` function dynamically names new or transformed columns as `std_` followed by the original column name, indicating they have been standardized.
   
Essentially, the code standardizes the values of all columns in `data` that start with the letter "x", ensuring they have a mean of 0 and a standard deviation of 1, then updates `data` with these standardized columns. 


## Creating Functions for Data Analysis

Creating custom functions can significantly enhance efficiency in data analysis. It might not be the case, but if you want to have a function that estimates the `mean`, `sd`, and `std` value in a column we can do the following. Let's called it `add_stats_columns`. This function is designed to enhance a dataset by adding statistical analysis columns related to a specific numeric column within the dataset. It calculates the mean, standard deviation, and creates a standardized version of the selected column. Below is an explanation of the function and a breakdown of each line within it:

### The `add_stats_columns` Function Explained

```{r}
add_stats_columns <- function(data, column_name) {
  mean_val <- mean(data[[column_name]], na.rm = TRUE)
  sd_val   <- sd(data[[column_name]], na.rm = TRUE)
  
  data[[paste0(column_name, "_mean")]] <- mean_val
  data[[paste0(column_name, "_sd")]]   <- sd_val
  data[[paste0(column_name, "_standardized")]] <- (data[[column_name]] - mean_val) / sd_val
  
  return(data)
}
```

#### Breaking Down the Function

- `add_stats_columns <- function(data, column_name) { ... }`: This line defines the function `add_stats_columns` that takes two arguments: `data`, a dataset (in the form of a data frame or tibble), and `column_name`, a string representing the name of the column to be analyzed.
- `mean_val <- mean(data[[column_name]], na.rm = TRUE)`: This line calculates the mean of the specified column, excluding any `NA` (missing) values with `na.rm = TRUE`, and stores it in `mean_val`.
- `sd_val <- sd(data[[column_name]], na.rm = TRUE)`: Similarly, this line calculates the standard deviation of the specified column, excluding `NA` values, and stores it in `sd_val`.
- `data[[paste0(column_name, "_mean")]] <- mean_val`: This line creates a new column in the dataset named after the original column with `_mean` appended (e.g., if `column_name` is `"scores"`, the new column name will be `"scores_mean"`), and assigns the calculated mean value to this new column for all rows.
- `data[[paste0(column_name, "_sd")]] <- sd_val`: This line adds another new column to the dataset for the standard deviation, following the same naming convention as for the mean (e.g., `"scores_sd"`), and fills it with the calculated standard deviation value.
- `data[[paste0(column_name, "_standardized")]] <- (data[[column_name]] - mean_val) / sd_val`: This line calculates the standardized value for each row in the specified column by subtracting the mean and dividing by the standard deviation. It then stores these values in a new column named with `_standardized` appended to the original column name (e.g., `"scores_standardized"`). Standardizing a dataset in this way adjusts the values to have a mean of 0 and a standard deviation of 1, which is useful for certain types of analysis and modeling.
- `return(data)`: Finally, the function returns the modified dataset with the new statistical columns added. In fact, you can just write `data`, do not need to use the `return` function but let's keep it.

### Usage Example

Assuming `students` is a dataset with a numeric column named `"math_scores"`, you can use the function to add statistical analysis columns related to `"math_scores"` as follows:

```{r}
# Example usage with a hypothetical numeric column in students dataset

# Students data
students <- tibble(
  stu_id = c(1, 2, 3, 4),
  stu_name = c("Emma", "Rony", "Jostin", "David"),
  dept_id = c(2, 2, 3, 4)
)

# Let's merge a math_scores data first.
scores <- tibble(
  stu_id = c(1, 2, 3, 4),
  math_scores = c(80, 95, 93, 90)
)

# Merge the scores with the students data using stu_id 
stu_scores <- right_join(students, scores, by = "stu_id")
stu_scores

# Now, let's apply the function add_stats_columns
stu_scores_with_stats <- add_stats_columns(stu_scores, "math_scores")
stu_scores_with_stats
```

### Applying Functions to Grouped Data

Using `dplyr` and `purrr` to apply functions to each group separately.

```{r}
# Group by department and apply stats function
students_grouped <- stu_scores %>%
  group_by(dept_id) %>%
  group_modify(~ add_stats_columns(.x, "math_scores")) %>%
  ungroup()

students_grouped
```

`group_modify()` applies a function to each group of a grouped dataframe, where `.x` is the sliced dataframe for each group. This way, the add_stats_columns function is applied correctly to each department group within your `stu_scores` dataset.

This corrected approach ensures that your custom function `add_stats_columns` is applied to the math_scores column for each group defined by `dept_id`, achieving the intended goal of adding statistical columns based on department groups.
