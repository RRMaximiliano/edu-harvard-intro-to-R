---
title: "Data Cleaning with the tidyverse"
author: "Rony Rodriguez-Ramirez"
date: "2024-02-02"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
```

## Introduction

Building on the basics of R and the tidyverse, this tutorial delves into more complex data cleaning and analysis techniques. We'll tackle common challenges encountered with real-world data and explore ways to manipulate and analyze datasets to extract meaningful insights. But first, let's see some differences between some data frames:

### Identifying Missing Values

In the tidyverse, `tibble()` and `tribble()` are functions that create a more modern take on the data frame. They are part of the `tibble` package and offer several advantages over the base R `data.frame` for data analysis and manipulation (the one we saw in the basics tutorial. Here's a brief overview of each and how they compare to traditional data frames.

### `tibble()`

A `tibble` is a modern reimagining of the data frame, keeping what time has proven to be effective, and throwing out what is not. Here are some key features:

- **Printing**: Tibbles are printed in a more readable format than traditional data frames, showing only the first 10 rows and all columns that fit on the screen.
- **Subsetting**: Subsetting a tibble with `[` always returns a tibble, unlike `data.frame`, which might return a vector if a single column is selected.
- **Column data types**: Tibbles are more tolerant about column types and do not convert strings to factors by default (a common source of frustration in R).

```{r}
# Creating a tibble
my_tibble <- tibble(
  id = 1:5,
  name = c("Emma", "Rony", "Jostin", "David", "Alex"),
  score = c(90, 80, 88, 100, 100)
)
```

### `tribble()`

`tribble()`, short for "transposed tibble", is designed for easy manual creation of tibbles. It allows for a column-wise specification of data which can be more readable and convenient for small datasets or examples.

- **Readability**: The layout of `tribble()` makes it easy to visually match values to their respective columns.
- **Convenience**: Ideal for creating small datasets for examples or tests.

```{r}
# Creating a tribble
my_tribble <- tribble(
  ~id, ~name,    ~score,
  1,   "Emma",  90,
  2,   "Rony",  80,
  3,   "Jostin", 88,
  4,   "David",  100,
  5,   "Alex",    100
)
```

### Differences from `data.frame`

While `data.frame` is the base R structure for storing tabular data, `tibble` and `tribble` bring improvements that are particularly useful in data analysis:

- **Printing and Viewing**: Tibbles provide a more user-friendly way to view data in the console.
- **Factor conversion**: By default, strings are not converted to factors in tibbles, avoiding unexpected behavior during data analysis.
- **Subsetting behavior**: Consistent output types make tibble subsetting more predictable.
- **Row names**: Tibbles do not use row names, which encourages cleaner, more explicit data manipulation.

In summary, `tibble()` and `tribble()` offer a modern, tidyverse-optimized approach to data frames, making data manipulation and exploration in R more intuitive and less prone to common data analysis pitfalls.

## Handling Missing Data

Real-world datasets often come with missing values, which can significantly impact your analysis. Let's explore strategies to deal with missing data. First, let's create a dataframe and call it `data` using the `tribble` function:

```{r}
# Load sample data
data <- tribble(
  ~id, ~value, ~category,
  1, NA, "A",
  2, 5, "B",
  3, 2, "A",
  4, NA, "B",
  5, 3, "C"
)

# Identify rows with missing values
data %>% 
  filter(is.na(value))
```

In this case, the condition is `is.na(value)`. The `is.na()` function checks for `NA` (missing) values in its argument. So, `is.na(value)` returns TRUE for each element in the value column that is missing (i.e., is `NA`) and `FALSE` for each element that is not missing.

The `filter(is.na(value))` command, therefore, retains only those rows in the data where the value column has missing (NA) values. All other rows where the value column does not have missing values are excluded from the output. Sometimes (most of the time) we would like to return only the data without missing values, so we can negate the function `is.na` with `!`

```{r}
# Keeping only the rows with no missing values
data %>% 
  filter(!is.na(value))
```

## Counting unique categories

One common task is to quantify how many times each category occurs within a dataset. This not only helps in identifying patterns or imbalances among categories but also aids in data preprocessing and cleaning by highlighting potential anomalies or errors in categorical data. In the following example, we will use the `count()` function on a dataframe `data`, targeting the `category` column. This approach enables us to efficiently count the number of occurrences of each unique value in the `category` column.

```{r}
# Counting (ocurrances) categories in the dataset.
data %>% 
  count(category)
```

The `distinct` function allows us to identify unique values present in the `category` column.

```{r}
# Identifying unique values
data %>%
  distinct(category)
```

For a rapid tally of these unique values, the `summarise` function can be employed, utilizing `n_distinct`.

```{r}
# Tallying unique values
data %>%
  summarise(n = n_distinct(category))
```

### Imputing Missing Values

```{r}
# Impute missing values with the mean
data %>% 
  mutate(
    value = if_else(is.na(value), mean(value, na.rm = TRUE), value)
  )
```

Here, I use the `mutate()` function to modify the `value` column, where the `if_else()` function checks each element of `value`: 

- if an element is missing (`is.na(value)` returns `TRUE`), it is replaced with the mean of the `value` column (computed with `mean(value, na.rm = TRUE)`, where `na.rm = TRUE` ensures that missing values are ignored in the mean calculation);
- if not missing, the original value is retained. This approach is commonly used in data preprocessing to handle missing data by filling in missing values with the mean, thus maintaining the dataset's size while addressing missingness without discarding any rows.

## Joining Datasets

Often, you'll need to combine data from multiple sources. Here, we'll use `dplyr`'s join functions to merge datasets.

**Students and Departments Dataset**

```{r}
# Students data
students <- tibble(
  stu_id = c(1, 2, 3, 4),
  stu_name = c("Emma", "Rony", "Jostin", "David"),
  dept_id = c(2, 2, 3, 4)
)

# Departments data
departments <- tibble(
  dept_id = c(1, 2, 3, 4),
  dept_name = c("Math", "EDU", "Science", "ECON")
)
```

### `left_join`

```{r}
# Include all students and their departments if available
stu_dept <- left_join(students, departments, by = "dept_id")
stu_dept
```

### `right_join`

```{r}
# Include all departments and any students in those departments
dept_stu <- right_join(students, departments, by = "dept_id")
dept_stu
```

### `full_join`

```{r}
# Include all students and all departments, matching where possible
all_stu_dept <- full_join(students, departments, by = "dept_id")
all_stu_dept
```

### `inner_join`

```{r}
# Merge datasets to include only matching IDs
inner_join(students, departments, by = "dept_id")
```


